{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c5498d84",
   "metadata": {
    "papermill": {
     "duration": 0.141516,
     "end_time": "2022-05-26T01:35:41.699276",
     "exception": false,
     "start_time": "2022-05-26T01:35:41.557760",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 목표\n",
    "- 타이타닉 데이터를 학습해서 생존자/사망자를 예측해보자구\n",
    "- 머신러닝 전체 과정에 대해서 정리해보자!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29543572",
   "metadata": {
    "papermill": {
     "duration": 0.124033,
     "end_time": "2022-05-26T01:35:41.970274",
     "exception": false,
     "start_time": "2022-05-26T01:35:41.846241",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 머신러닝 과정\n",
    "- 문제정의\n",
    "- 데이터 수집\n",
    "- 데이터 전처리\n",
    "- 탐색적분석(EDA)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c904f326",
   "metadata": {
    "papermill": {
     "duration": 0.132084,
     "end_time": "2022-05-26T01:35:42.229338",
     "exception": false,
     "start_time": "2022-05-26T01:35:42.097254",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "###  1. 문제정의\n",
    "- 생존자/사망자 예측\n",
    "- kaggle 경진대회에서 높은 순위를 차지!\n",
    "- 머신러닝 과정 전체를 체험해보는 예쩨"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18803ade",
   "metadata": {
    "papermill": {
     "duration": 0.125248,
     "end_time": "2022-05-26T01:35:42.488082",
     "exception": false,
     "start_time": "2022-05-26T01:35:42.362834",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2. 데이터 수집\n",
    "- kaggle 사이트로부터 train, test, gender_submission 다운로드"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "70d0f5e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:42.749787Z",
     "iopub.status.busy": "2022-05-26T01:35:42.749171Z",
     "iopub.status.idle": "2022-05-26T01:35:43.924979Z",
     "shell.execute_reply": "2022-05-26T01:35:43.924057Z"
    },
    "papermill": {
     "duration": 1.310511,
     "end_time": "2022-05-26T01:35:43.927645",
     "exception": false,
     "start_time": "2022-05-26T01:35:42.617134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns #시각화 라이브러리"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e34af448",
   "metadata": {
    "papermill": {
     "duration": 0.123427,
     "end_time": "2022-05-26T01:35:44.175991",
     "exception": false,
     "start_time": "2022-05-26T01:35:44.052564",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Q1\n",
    "- 타이타닉 train데이터와 test데이터를 변수 train, test에 저장!\n",
    "- 인덱스는 PassengerId사용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e1be6af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:44.427340Z",
     "iopub.status.busy": "2022-05-26T01:35:44.426851Z",
     "iopub.status.idle": "2022-05-26T01:35:44.463216Z",
     "shell.execute_reply": "2022-05-26T01:35:44.462483Z"
    },
    "papermill": {
     "duration": 0.163883,
     "end_time": "2022-05-26T01:35:44.465634",
     "exception": false,
     "start_time": "2022-05-26T01:35:44.301751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('../input/titanic/train.csv', index_col='PassengerId')\n",
    "test = pd.read_csv('../input/titanic/test.csv', index_col='PassengerId')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7dc4fa42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:44.718361Z",
     "iopub.status.busy": "2022-05-26T01:35:44.717861Z",
     "iopub.status.idle": "2022-05-26T01:35:44.739911Z",
     "shell.execute_reply": "2022-05-26T01:35:44.739190Z"
    },
    "papermill": {
     "duration": 0.153658,
     "end_time": "2022-05-26T01:35:44.742519",
     "exception": false,
     "start_time": "2022-05-26T01:35:44.588861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived  Pclass  \\\n",
       "PassengerId                     \n",
       "1                   0       3   \n",
       "2                   1       1   \n",
       "3                   1       3   \n",
       "4                   1       1   \n",
       "5                   0       3   \n",
       "\n",
       "                                                          Name     Sex   Age  \\\n",
       "PassengerId                                                                    \n",
       "1                                      Braund, Mr. Owen Harris    male  22.0   \n",
       "2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0   \n",
       "3                                       Heikkinen, Miss. Laina  female  26.0   \n",
       "4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0   \n",
       "5                                     Allen, Mr. William Henry    male  35.0   \n",
       "\n",
       "             SibSp  Parch            Ticket     Fare Cabin Embarked  \n",
       "PassengerId                                                          \n",
       "1                1      0         A/5 21171   7.2500   NaN        S  \n",
       "2                1      0          PC 17599  71.2833   C85        C  \n",
       "3                0      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "4                1      0            113803  53.1000  C123        S  \n",
       "5                0      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2e02a49a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:44.995498Z",
     "iopub.status.busy": "2022-05-26T01:35:44.995013Z",
     "iopub.status.idle": "2022-05-26T01:35:45.000275Z",
     "shell.execute_reply": "2022-05-26T01:35:44.998929Z"
    },
    "papermill": {
     "duration": 0.13534,
     "end_time": "2022-05-26T01:35:45.002557",
     "exception": false,
     "start_time": "2022-05-26T01:35:44.867217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 11)\n",
      "(418, 10)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e8984b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:45.291981Z",
     "iopub.status.busy": "2022-05-26T01:35:45.291447Z",
     "iopub.status.idle": "2022-05-26T01:35:45.308697Z",
     "shell.execute_reply": "2022-05-26T01:35:45.307782Z"
    },
    "papermill": {
     "duration": 0.15813,
     "end_time": "2022-05-26T01:35:45.311130",
     "exception": false,
     "start_time": "2022-05-26T01:35:45.153000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Name      891 non-null    object \n",
      " 3   Sex       891 non-null    object \n",
      " 4   Age       714 non-null    float64\n",
      " 5   SibSp     891 non-null    int64  \n",
      " 6   Parch     891 non-null    int64  \n",
      " 7   Ticket    891 non-null    object \n",
      " 8   Fare      891 non-null    float64\n",
      " 9   Cabin     204 non-null    object \n",
      " 10  Embarked  889 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 83.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dfdb78f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:45.561574Z",
     "iopub.status.busy": "2022-05-26T01:35:45.561270Z",
     "iopub.status.idle": "2022-05-26T01:35:45.573885Z",
     "shell.execute_reply": "2022-05-26T01:35:45.572928Z"
    },
    "papermill": {
     "duration": 0.140839,
     "end_time": "2022-05-26T01:35:45.576421",
     "exception": false,
     "start_time": "2022-05-26T01:35:45.435582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 892 to 1309\n",
      "Data columns (total 10 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Pclass    418 non-null    int64  \n",
      " 1   Name      418 non-null    object \n",
      " 2   Sex       418 non-null    object \n",
      " 3   Age       332 non-null    float64\n",
      " 4   SibSp     418 non-null    int64  \n",
      " 5   Parch     418 non-null    int64  \n",
      " 6   Ticket    418 non-null    object \n",
      " 7   Fare      417 non-null    float64\n",
      " 8   Cabin     91 non-null     object \n",
      " 9   Embarked  418 non-null    object \n",
      "dtypes: float64(2), int64(3), object(5)\n",
      "memory usage: 35.9+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de8f2159",
   "metadata": {
    "papermill": {
     "duration": 0.125986,
     "end_time": "2022-05-26T01:35:45.827800",
     "exception": false,
     "start_time": "2022-05-26T01:35:45.701814",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Age, Cabin, Embarked"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "845afa58",
   "metadata": {
    "papermill": {
     "duration": 0.131346,
     "end_time": "2022-05-26T01:35:46.086223",
     "exception": false,
     "start_time": "2022-05-26T01:35:45.954877",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Age 채우기\n",
    "- 단순 기술통계치로 채우지 않고, 다른 컬럼과의 상관관계를 이용해서 결측치 채우기\n",
    "- Age와 다른 컬럼의 상관관계 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b9be6e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:46.344061Z",
     "iopub.status.busy": "2022-05-26T01:35:46.343564Z",
     "iopub.status.idle": "2022-05-26T01:35:46.358701Z",
     "shell.execute_reply": "2022-05-26T01:35:46.357684Z"
    },
    "papermill": {
     "duration": 0.14364,
     "end_time": "2022-05-26T01:35:46.361010",
     "exception": false,
     "start_time": "2022-05-26T01:35:46.217370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.338481</td>\n",
       "      <td>-0.077221</td>\n",
       "      <td>-0.035322</td>\n",
       "      <td>0.081629</td>\n",
       "      <td>0.257307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>-0.338481</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.369226</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.549500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>-0.077221</td>\n",
       "      <td>-0.369226</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.308247</td>\n",
       "      <td>-0.189119</td>\n",
       "      <td>0.096067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>-0.035322</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>-0.308247</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>0.159651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0.081629</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.189119</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.216225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0.257307</td>\n",
       "      <td>-0.549500</td>\n",
       "      <td>0.096067</td>\n",
       "      <td>0.159651</td>\n",
       "      <td>0.216225</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived    Pclass       Age     SibSp     Parch      Fare\n",
       "Survived  1.000000 -0.338481 -0.077221 -0.035322  0.081629  0.257307\n",
       "Pclass   -0.338481  1.000000 -0.369226  0.083081  0.018443 -0.549500\n",
       "Age      -0.077221 -0.369226  1.000000 -0.308247 -0.189119  0.096067\n",
       "SibSp    -0.035322  0.083081 -0.308247  1.000000  0.414838  0.159651\n",
       "Parch     0.081629  0.018443 -0.189119  0.414838  1.000000  0.216225\n",
       "Fare      0.257307 -0.549500  0.096067  0.159651  0.216225  1.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d5e6e53",
   "metadata": {
    "papermill": {
     "duration": 0.125954,
     "end_time": "2022-05-26T01:35:46.613504",
     "exception": false,
     "start_time": "2022-05-26T01:35:46.487550",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Age컬럼과 상관관계가 높은 컬럼은  Pclass\n",
    "- 생존에 관련이 많을 것 같은 성별을 함꼐 그룹핑에 활용해보자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ea1adcf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:46.893169Z",
     "iopub.status.busy": "2022-05-26T01:35:46.892412Z",
     "iopub.status.idle": "2022-05-26T01:35:46.910554Z",
     "shell.execute_reply": "2022-05-26T01:35:46.909648Z"
    },
    "papermill": {
     "duration": 0.172879,
     "end_time": "2022-05-26T01:35:46.913047",
     "exception": false,
     "start_time": "2022-05-26T01:35:46.740168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pt1 = train.pivot_table(values = 'Age',\n",
    "                       index = ['Pclass','Sex'],\n",
    "                       aggfunc='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3d0af3f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:47.170477Z",
     "iopub.status.busy": "2022-05-26T01:35:47.170213Z",
     "iopub.status.idle": "2022-05-26T01:35:47.179328Z",
     "shell.execute_reply": "2022-05-26T01:35:47.178719Z"
    },
    "papermill": {
     "duration": 0.139705,
     "end_time": "2022-05-26T01:35:47.181708",
     "exception": false,
     "start_time": "2022-05-26T01:35:47.042003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
       "      <th>female</th>\n",
       "      <td>34.611765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>41.281386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2</th>\n",
       "      <th>female</th>\n",
       "      <td>28.722973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>30.740707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">3</th>\n",
       "      <th>female</th>\n",
       "      <td>21.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>26.507589</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Age\n",
       "Pclass Sex              \n",
       "1      female  34.611765\n",
       "       male    41.281386\n",
       "2      female  28.722973\n",
       "       male    30.740707\n",
       "3      female  21.750000\n",
       "       male    26.507589"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "da8f9ef6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:47.436135Z",
     "iopub.status.busy": "2022-05-26T01:35:47.435728Z",
     "iopub.status.idle": "2022-05-26T01:35:47.442879Z",
     "shell.execute_reply": "2022-05-26T01:35:47.441960Z"
    },
    "papermill": {
     "duration": 0.136975,
     "end_time": "2022-05-26T01:35:47.444773",
     "exception": false,
     "start_time": "2022-05-26T01:35:47.307798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age    34.611765\n",
       "Name: (1, female), dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 34.611765 값 인덱싱\n",
    "pt1.loc[1, 'female']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b9bb1de8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:47.699796Z",
     "iopub.status.busy": "2022-05-26T01:35:47.699304Z",
     "iopub.status.idle": "2022-05-26T01:35:47.705742Z",
     "shell.execute_reply": "2022-05-26T01:35:47.704959Z"
    },
    "papermill": {
     "duration": 0.135868,
     "end_time": "2022-05-26T01:35:47.707675",
     "exception": false,
     "start_time": "2022-05-26T01:35:47.571807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age    26.507589\n",
       "Name: (3, male), dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 26.507589\n",
    "pt1.loc[3, 'male']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "617283ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:47.963158Z",
     "iopub.status.busy": "2022-05-26T01:35:47.962553Z",
     "iopub.status.idle": "2022-05-26T01:35:47.966076Z",
     "shell.execute_reply": "2022-05-26T01:35:47.965200Z"
    },
    "papermill": {
     "duration": 0.133719,
     "end_time": "2022-05-26T01:35:47.968117",
     "exception": false,
     "start_time": "2022-05-26T01:35:47.834398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# apply 함수 적용하여 age 컬럼의 결측치를 채워보자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9de90cfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:48.230143Z",
     "iopub.status.busy": "2022-05-26T01:35:48.229706Z",
     "iopub.status.idle": "2022-05-26T01:35:48.234161Z",
     "shell.execute_reply": "2022-05-26T01:35:48.233574Z"
    },
    "papermill": {
     "duration": 0.139184,
     "end_time": "2022-05-26T01:35:48.236040",
     "exception": false,
     "start_time": "2022-05-26T01:35:48.096856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fill_age(row):\n",
    "    #만약 나이가 결측치라면 피봇테이블에서 값을 가져오자\n",
    "    if np.isnan(row['Age']):\n",
    "        return pt1.loc[row['Pclass'], row['Sex']]\n",
    "    #만약 나이가 결측치가 아니라면 원래 나이 값을 사용하자\n",
    "    else:\n",
    "        return row['Age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9063089a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:48.490718Z",
     "iopub.status.busy": "2022-05-26T01:35:48.490407Z",
     "iopub.status.idle": "2022-05-26T01:35:48.569170Z",
     "shell.execute_reply": "2022-05-26T01:35:48.568226Z"
    },
    "papermill": {
     "duration": 0.209165,
     "end_time": "2022-05-26T01:35:48.571588",
     "exception": false,
     "start_time": "2022-05-26T01:35:48.362423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Name      891 non-null    object \n",
      " 3   Sex       891 non-null    object \n",
      " 4   Age       891 non-null    int64  \n",
      " 5   SibSp     891 non-null    int64  \n",
      " 6   Parch     891 non-null    int64  \n",
      " 7   Ticket    891 non-null    object \n",
      " 8   Fare      891 non-null    float64\n",
      " 9   Cabin     204 non-null    object \n",
      " 10  Embarked  889 non-null    object \n",
      "dtypes: float64(1), int64(5), object(5)\n",
      "memory usage: 83.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train['Age'] = train.apply(fill_age, axis=1).astype('int64')\n",
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0c652453",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:48.828507Z",
     "iopub.status.busy": "2022-05-26T01:35:48.828207Z",
     "iopub.status.idle": "2022-05-26T01:35:48.872246Z",
     "shell.execute_reply": "2022-05-26T01:35:48.871179Z"
    },
    "papermill": {
     "duration": 0.176441,
     "end_time": "2022-05-26T01:35:48.875220",
     "exception": false,
     "start_time": "2022-05-26T01:35:48.698779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 892 to 1309\n",
      "Data columns (total 10 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Pclass    418 non-null    int64  \n",
      " 1   Name      418 non-null    object \n",
      " 2   Sex       418 non-null    object \n",
      " 3   Age       418 non-null    int64  \n",
      " 4   SibSp     418 non-null    int64  \n",
      " 5   Parch     418 non-null    int64  \n",
      " 6   Ticket    418 non-null    object \n",
      " 7   Fare      417 non-null    float64\n",
      " 8   Cabin     91 non-null     object \n",
      " 9   Embarked  418 non-null    object \n",
      "dtypes: float64(1), int64(4), object(5)\n",
      "memory usage: 35.9+ KB\n"
     ]
    }
   ],
   "source": [
    "test['Age'] = test.apply(fill_age, axis=1).astype('int64')\n",
    "test.info() \n",
    "#훈련데이터를 기밥으로 학습하기 때문에 train 데이터의 age 값으로 결측치 채움"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d1ad4d",
   "metadata": {
    "papermill": {
     "duration": 0.12801,
     "end_time": "2022-05-26T01:35:49.134570",
     "exception": false,
     "start_time": "2022-05-26T01:35:49.006560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Embarked 결측치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3f4607d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:49.393282Z",
     "iopub.status.busy": "2022-05-26T01:35:49.392975Z",
     "iopub.status.idle": "2022-05-26T01:35:49.400706Z",
     "shell.execute_reply": "2022-05-26T01:35:49.399868Z"
    },
    "papermill": {
     "duration": 0.139595,
     "end_time": "2022-05-26T01:35:49.402819",
     "exception": false,
     "start_time": "2022-05-26T01:35:49.263224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Embarked'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5b483001",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:49.661310Z",
     "iopub.status.busy": "2022-05-26T01:35:49.660811Z",
     "iopub.status.idle": "2022-05-26T01:35:49.668437Z",
     "shell.execute_reply": "2022-05-26T01:35:49.667555Z"
    },
    "papermill": {
     "duration": 0.139612,
     "end_time": "2022-05-26T01:35:49.670546",
     "exception": false,
     "start_time": "2022-05-26T01:35:49.530934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S    270\n",
       "C    102\n",
       "Q     46\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test['Embarked'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "66a805bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:49.933467Z",
     "iopub.status.busy": "2022-05-26T01:35:49.932976Z",
     "iopub.status.idle": "2022-05-26T01:35:49.937277Z",
     "shell.execute_reply": "2022-05-26T01:35:49.936671Z"
    },
    "papermill": {
     "duration": 0.137794,
     "end_time": "2022-05-26T01:35:49.939274",
     "exception": false,
     "start_time": "2022-05-26T01:35:49.801480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 'S' 로 결측치 채우기\n",
    "train['Embarked']=train['Embarked'].fillna('S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ef9d3df7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:50.229561Z",
     "iopub.status.busy": "2022-05-26T01:35:50.229081Z",
     "iopub.status.idle": "2022-05-26T01:35:50.241944Z",
     "shell.execute_reply": "2022-05-26T01:35:50.240664Z"
    },
    "papermill": {
     "duration": 0.158309,
     "end_time": "2022-05-26T01:35:50.245116",
     "exception": false,
     "start_time": "2022-05-26T01:35:50.086807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Name      891 non-null    object \n",
      " 3   Sex       891 non-null    object \n",
      " 4   Age       891 non-null    int64  \n",
      " 5   SibSp     891 non-null    int64  \n",
      " 6   Parch     891 non-null    int64  \n",
      " 7   Ticket    891 non-null    object \n",
      " 8   Fare      891 non-null    float64\n",
      " 9   Cabin     204 non-null    object \n",
      " 10  Embarked  891 non-null    object \n",
      "dtypes: float64(1), int64(5), object(5)\n",
      "memory usage: 83.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "04b782c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:50.506893Z",
     "iopub.status.busy": "2022-05-26T01:35:50.506552Z",
     "iopub.status.idle": "2022-05-26T01:35:50.515009Z",
     "shell.execute_reply": "2022-05-26T01:35:50.514149Z"
    },
    "papermill": {
     "duration": 0.141238,
     "end_time": "2022-05-26T01:35:50.517576",
     "exception": false,
     "start_time": "2022-05-26T01:35:50.376338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass        0\n",
       "Name          0\n",
       "Sex           0\n",
       "Age           0\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Ticket        0\n",
       "Fare          1\n",
       "Cabin       327\n",
       "Embarked      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c3a4ebb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:50.780313Z",
     "iopub.status.busy": "2022-05-26T01:35:50.779530Z",
     "iopub.status.idle": "2022-05-26T01:35:50.792661Z",
     "shell.execute_reply": "2022-05-26T01:35:50.792044Z"
    },
    "papermill": {
     "duration": 0.147031,
     "end_time": "2022-05-26T01:35:50.794540",
     "exception": false,
     "start_time": "2022-05-26T01:35:50.647509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.338481</td>\n",
       "      <td>-0.066538</td>\n",
       "      <td>-0.035322</td>\n",
       "      <td>0.081629</td>\n",
       "      <td>0.257307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>-0.338481</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.410104</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.549500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>-0.066538</td>\n",
       "      <td>-0.410104</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.251439</td>\n",
       "      <td>-0.178855</td>\n",
       "      <td>0.120173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>-0.035322</td>\n",
       "      <td>0.083081</td>\n",
       "      <td>-0.251439</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>0.159651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0.081629</td>\n",
       "      <td>0.018443</td>\n",
       "      <td>-0.178855</td>\n",
       "      <td>0.414838</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.216225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0.257307</td>\n",
       "      <td>-0.549500</td>\n",
       "      <td>0.120173</td>\n",
       "      <td>0.159651</td>\n",
       "      <td>0.216225</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived    Pclass       Age     SibSp     Parch      Fare\n",
       "Survived  1.000000 -0.338481 -0.066538 -0.035322  0.081629  0.257307\n",
       "Pclass   -0.338481  1.000000 -0.410104  0.083081  0.018443 -0.549500\n",
       "Age      -0.066538 -0.410104  1.000000 -0.251439 -0.178855  0.120173\n",
       "SibSp    -0.035322  0.083081 -0.251439  1.000000  0.414838  0.159651\n",
       "Parch     0.081629  0.018443 -0.178855  0.414838  1.000000  0.216225\n",
       "Fare      0.257307 -0.549500  0.120173  0.159651  0.216225  1.000000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "33db37c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:51.062878Z",
     "iopub.status.busy": "2022-05-26T01:35:51.061794Z",
     "iopub.status.idle": "2022-05-26T01:35:51.079497Z",
     "shell.execute_reply": "2022-05-26T01:35:51.078766Z"
    },
    "papermill": {
     "duration": 0.155139,
     "end_time": "2022-05-26T01:35:51.081679",
     "exception": false,
     "start_time": "2022-05-26T01:35:50.926540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
       "      <th>female</th>\n",
       "      <td>106.125798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>67.226127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2</th>\n",
       "      <th>female</th>\n",
       "      <td>21.970121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>19.741782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">3</th>\n",
       "      <th>female</th>\n",
       "      <td>16.118810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>12.661633</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Fare\n",
       "Pclass Sex               \n",
       "1      female  106.125798\n",
       "       male     67.226127\n",
       "2      female   21.970121\n",
       "       male     19.741782\n",
       "3      female   16.118810\n",
       "       male     12.661633"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt2 = train.pivot_table(values='Fare',\n",
    "                       index = ['Pclass','Sex'],\n",
    "                       aggfunc = 'mean')\n",
    "pt2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "59ac0b17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:51.389332Z",
     "iopub.status.busy": "2022-05-26T01:35:51.388732Z",
     "iopub.status.idle": "2022-05-26T01:35:51.402154Z",
     "shell.execute_reply": "2022-05-26T01:35:51.401478Z"
    },
    "papermill": {
     "duration": 0.164049,
     "end_time": "2022-05-26T01:35:51.403985",
     "exception": false,
     "start_time": "2022-05-26T01:35:51.239936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1044</th>\n",
       "      <td>3</td>\n",
       "      <td>Storey, Mr. Thomas</td>\n",
       "      <td>male</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Pclass                Name   Sex  Age  SibSp  Parch Ticket  Fare  \\\n",
       "PassengerId                                                                     \n",
       "1044              3  Storey, Mr. Thomas  male   60      0      0   3701   NaN   \n",
       "\n",
       "            Cabin Embarked  \n",
       "PassengerId                 \n",
       "1044          NaN        S  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#불리언 인덱싱으로 test데이터의 Fare컬럼에 존재하는 결측치 행 출력\n",
    "test[test['Fare'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "89a0054f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:51.676177Z",
     "iopub.status.busy": "2022-05-26T01:35:51.675662Z",
     "iopub.status.idle": "2022-05-26T01:35:51.680254Z",
     "shell.execute_reply": "2022-05-26T01:35:51.679664Z"
    },
    "papermill": {
     "duration": 0.139634,
     "end_time": "2022-05-26T01:35:51.682116",
     "exception": false,
     "start_time": "2022-05-26T01:35:51.542482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test['Fare'] = test['Fare'].fillna('12.661633')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3286b2ec",
   "metadata": {
    "papermill": {
     "duration": 0.132855,
     "end_time": "2022-05-26T01:35:51.945088",
     "exception": false,
     "start_time": "2022-05-26T01:35:51.812233",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Cabin 결측치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0ad0f86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:52.261847Z",
     "iopub.status.busy": "2022-05-26T01:35:52.261523Z",
     "iopub.status.idle": "2022-05-26T01:35:52.268179Z",
     "shell.execute_reply": "2022-05-26T01:35:52.267548Z"
    },
    "papermill": {
     "duration": 0.173989,
     "end_time": "2022-05-26T01:35:52.269991",
     "exception": false,
     "start_time": "2022-05-26T01:35:52.096002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n",
       "       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n",
       "       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n",
       "       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n",
       "       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n",
       "       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n",
       "       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n",
       "       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n",
       "       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n",
       "       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n",
       "       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n",
       "       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n",
       "       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n",
       "       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n",
       "       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n",
       "       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n",
       "       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n",
       "       'C148'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Cabin'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3f7d66fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:52.537320Z",
     "iopub.status.busy": "2022-05-26T01:35:52.536758Z",
     "iopub.status.idle": "2022-05-26T01:35:52.542986Z",
     "shell.execute_reply": "2022-05-26T01:35:52.542027Z"
    },
    "papermill": {
     "duration": 0.142448,
     "end_time": "2022-05-26T01:35:52.545190",
     "exception": false,
     "start_time": "2022-05-26T01:35:52.402742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Deck'] = train['Cabin'].fillna('M')\n",
    "test['Deck'] = test['Cabin'].fillna('M')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "29d0994a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:52.817695Z",
     "iopub.status.busy": "2022-05-26T01:35:52.817350Z",
     "iopub.status.idle": "2022-05-26T01:35:52.824694Z",
     "shell.execute_reply": "2022-05-26T01:35:52.823942Z"
    },
    "papermill": {
     "duration": 0.149763,
     "end_time": "2022-05-26T01:35:52.826919",
     "exception": false,
     "start_time": "2022-05-26T01:35:52.677156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Cabin 컬럼 삭제\n",
    "train.drop('Cabin', axis=1, inplace=True)\n",
    "test.drop('Cabin', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "81861293",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:53.097684Z",
     "iopub.status.busy": "2022-05-26T01:35:53.097093Z",
     "iopub.status.idle": "2022-05-26T01:35:53.109943Z",
     "shell.execute_reply": "2022-05-26T01:35:53.108906Z"
    },
    "papermill": {
     "duration": 0.151583,
     "end_time": "2022-05-26T01:35:53.112070",
     "exception": false,
     "start_time": "2022-05-26T01:35:52.960487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Name      891 non-null    object \n",
      " 3   Sex       891 non-null    object \n",
      " 4   Age       891 non-null    int64  \n",
      " 5   SibSp     891 non-null    int64  \n",
      " 6   Parch     891 non-null    int64  \n",
      " 7   Ticket    891 non-null    object \n",
      " 8   Fare      891 non-null    float64\n",
      " 9   Embarked  891 non-null    object \n",
      " 10  Deck      891 non-null    object \n",
      "dtypes: float64(1), int64(5), object(5)\n",
      "memory usage: 83.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4ab633a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:53.380574Z",
     "iopub.status.busy": "2022-05-26T01:35:53.379700Z",
     "iopub.status.idle": "2022-05-26T01:35:53.392831Z",
     "shell.execute_reply": "2022-05-26T01:35:53.392167Z"
    },
    "papermill": {
     "duration": 0.149015,
     "end_time": "2022-05-26T01:35:53.395114",
     "exception": false,
     "start_time": "2022-05-26T01:35:53.246099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 892 to 1309\n",
      "Data columns (total 10 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   Pclass    418 non-null    int64 \n",
      " 1   Name      418 non-null    object\n",
      " 2   Sex       418 non-null    object\n",
      " 3   Age       418 non-null    int64 \n",
      " 4   SibSp     418 non-null    int64 \n",
      " 5   Parch     418 non-null    int64 \n",
      " 6   Ticket    418 non-null    object\n",
      " 7   Fare      418 non-null    object\n",
      " 8   Embarked  418 non-null    object\n",
      " 9   Deck      418 non-null    object\n",
      "dtypes: int64(4), object(6)\n",
      "memory usage: 35.9+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "98fe9bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:53.720391Z",
     "iopub.status.busy": "2022-05-26T01:35:53.719449Z",
     "iopub.status.idle": "2022-05-26T01:35:53.727018Z",
     "shell.execute_reply": "2022-05-26T01:35:53.726284Z"
    },
    "papermill": {
     "duration": 0.176462,
     "end_time": "2022-05-26T01:35:53.729271",
     "exception": false,
     "start_time": "2022-05-26T01:35:53.552809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Deck'] = train['Deck'].str[0]\n",
    "test['Deck'] = test['Deck'].str[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f949f793",
   "metadata": {
    "papermill": {
     "duration": 0.134221,
     "end_time": "2022-05-26T01:35:53.996338",
     "exception": false,
     "start_time": "2022-05-26T01:35:53.862117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 데이터 탐색\n",
    "- train 데이터를 이용해 탐색\n",
    "- test를 탐색하는 것은 모델을 일반화하는데 도움이 되지 않음"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "574a5b9b",
   "metadata": {
    "papermill": {
     "duration": 0.132608,
     "end_time": "2022-05-26T01:35:54.263911",
     "exception": false,
     "start_time": "2022-05-26T01:35:54.131303",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Dect 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a3a47ffc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:54.529682Z",
     "iopub.status.busy": "2022-05-26T01:35:54.529142Z",
     "iopub.status.idle": "2022-05-26T01:35:54.542527Z",
     "shell.execute_reply": "2022-05-26T01:35:54.541609Z"
    },
    "papermill": {
     "duration": 0.148966,
     "end_time": "2022-05-26T01:35:54.544824",
     "exception": false,
     "start_time": "2022-05-26T01:35:54.395858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deck</th>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">A</th>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">B</th>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">C</th>\n",
       "      <th>0</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">D</th>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">E</th>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">F</th>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">G</th>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">M</th>\n",
       "      <th>0</th>\n",
       "      <td>481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T</th>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Name\n",
       "Deck Survived      \n",
       "A    0            8\n",
       "     1            7\n",
       "B    0           12\n",
       "     1           35\n",
       "C    0           24\n",
       "     1           35\n",
       "D    0            8\n",
       "     1           25\n",
       "E    0            8\n",
       "     1           24\n",
       "F    0            5\n",
       "     1            8\n",
       "G    0            2\n",
       "     1            2\n",
       "M    0          481\n",
       "     1          206\n",
       "T    0            1"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Deck = train[['Deck', 'Survived', 'Name']].groupby(['Deck','Survived']).count()\n",
    "train_Deck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cba3d821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:54.817335Z",
     "iopub.status.busy": "2022-05-26T01:35:54.817018Z",
     "iopub.status.idle": "2022-05-26T01:35:55.108243Z",
     "shell.execute_reply": "2022-05-26T01:35:55.107267Z"
    },
    "papermill": {
     "duration": 0.431089,
     "end_time": "2022-05-26T01:35:55.110510",
     "exception": false,
     "start_time": "2022-05-26T01:35:54.679421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Deck', ylabel='count'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Deck', hue='Survived')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28f8a1c8",
   "metadata": {
    "papermill": {
     "duration": 0.135566,
     "end_time": "2022-05-26T01:35:55.380952",
     "exception": false,
     "start_time": "2022-05-26T01:35:55.245386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- M에서 상대적으로 사람이 많이 죽음\n",
    "- 생존여부 판단에 활용해도 괜찮지 않을까"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "071cad2c",
   "metadata": {
    "papermill": {
     "duration": 0.13355,
     "end_time": "2022-05-26T01:35:55.647848",
     "exception": false,
     "start_time": "2022-05-26T01:35:55.514298",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Pclass 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6bc97309",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:55.918272Z",
     "iopub.status.busy": "2022-05-26T01:35:55.917999Z",
     "iopub.status.idle": "2022-05-26T01:35:56.117110Z",
     "shell.execute_reply": "2022-05-26T01:35:56.116232Z"
    },
    "papermill": {
     "duration": 0.337007,
     "end_time": "2022-05-26T01:35:56.119307",
     "exception": false,
     "start_time": "2022-05-26T01:35:55.782300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Pclass', ylabel='count'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x='Pclass', hue='Survived')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47da8718",
   "metadata": {
    "papermill": {
     "duration": 0.135615,
     "end_time": "2022-05-26T01:35:56.390274",
     "exception": false,
     "start_time": "2022-05-26T01:35:56.254659",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- 3등급 사람들이 많이 죽음"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cfaca29",
   "metadata": {
    "papermill": {
     "duration": 0.139226,
     "end_time": "2022-05-26T01:35:56.669323",
     "exception": false,
     "start_time": "2022-05-26T01:35:56.530097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Deck과 Pclass 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "17f0951a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:56.948254Z",
     "iopub.status.busy": "2022-05-26T01:35:56.947863Z",
     "iopub.status.idle": "2022-05-26T01:35:57.241744Z",
     "shell.execute_reply": "2022-05-26T01:35:57.240724Z"
    },
    "papermill": {
     "duration": 0.435951,
     "end_time": "2022-05-26T01:35:57.244039",
     "exception": false,
     "start_time": "2022-05-26T01:35:56.808088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Deck', ylabel='count'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,5))\n",
    "sns.countplot(data = train, x = 'Deck', hue = 'Pclass')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60216120",
   "metadata": {
    "papermill": {
     "duration": 0.138273,
     "end_time": "2022-05-26T01:35:57.521695",
     "exception": false,
     "start_time": "2022-05-26T01:35:57.383422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Q2\n",
    "- Sex, Embarked 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a0a29a18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:57.798834Z",
     "iopub.status.busy": "2022-05-26T01:35:57.798490Z",
     "iopub.status.idle": "2022-05-26T01:35:58.000609Z",
     "shell.execute_reply": "2022-05-26T01:35:57.999696Z"
    },
    "papermill": {
     "duration": 0.34415,
     "end_time": "2022-05-26T01:35:58.002940",
     "exception": false,
     "start_time": "2022-05-26T01:35:57.658790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='count'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAV3ElEQVR4nO3de5RV5Znn8e9DiZRBxAi1HLHAMl4weEMpNUo6i4CNBB0Vh0jbdgRlNSEBu42JUZtM7IlxRiexNXF61FpjIvQyLZoYY7vMxVHUeElQsETBNtQEbctGRCIgUYhVvPPH2ewusYAD1D6nqPp+1jqLvd99e44e/Pnuy7sjpYQkSQB9ql2AJKn7MBQkSTlDQZKUMxQkSTlDQZKU26vaBeyOwYMHp4aGhmqXIUl7lEWLFr2dUqrrbNkeHQoNDQ0899xz1S5DkvYoEfHatpZ5+kiSlDMUJEk5Q0GSlNujrylI0q764IMPaG1tZePGjdUupTC1tbXU19fTt2/fsrcxFCT1Sq2trQwYMICGhgYiotrldLmUEmvWrKG1tZVDDz207O08fSSpV9q4cSODBg3qkYEAEBEMGjRop3tChoKkXqunBsIWu/L9DAVJUs5QkKRMTU0NI0eOzD/XX3992ds+9thjnHXWWbt1/DFjxuzyA7nTpk3jxz/+8W4dH7zQzKgr5lW7hJ2y6DsXVbsEqcfaZ599aG5ursqx29vbq3LcrdlTkKQdaGho4Oqrr2bkyJE0NjayePFizjjjDA477DBuu+22fL3169dz5plnMnz4cGbOnMnmzZsB+NKXvkRjYyNHH30011xzzYf2e+WVV3LiiSdy77335u2bN29m2rRpfOMb36C9vZ0rrriCk046ieOOO47bb78dKN1dNHv2bIYPH87pp5/OW2+91SXftdf3FCRpi/fff5+RI0fm81dffTVTpkwBYNiwYTQ3N/OVr3yFadOm8dRTT7Fx40aOOeYYZs6cCcDChQtZtmwZhxxyCBMmTOC+++5j8uTJXHfddRxwwAG0t7czbtw4lixZwnHHHQfAoEGDWLx4MQC33XYbbW1tXHjhhRxzzDHMmTOHpqYmBg4cyLPPPsumTZsYPXo048eP5/nnn+eVV15h2bJlrFq1ihEjRnDJJZfs9j8DQ0GSMts7fXT22WcDcOyxx7JhwwYGDBjAgAED6NevH2vXrgXg5JNP5hOf+AQAF1xwAU8++SSTJ0/mnnvuoampiba2NlauXMmyZcvyUNgSOlt88Ytf5Pzzz2fOnDkA/OpXv2LJkiX59YJ169axfPlynnjiCS644AJqamoYMmQIY8eO7ZJ/Bp4+kqQy9OvXD4A+ffrk01vm29ragI/eAhoRrFixgu9+97s88sgjLFmyhDPPPPNDzw7079//Q9ucdtppLFiwIF8npcQtt9xCc3Mzzc3NrFixgvHjxxfyHcFQkKQus3DhQlasWMHmzZuZP38+n/70p1m/fj39+/dn4MCBrFq1ip///Ofb3cf06dOZOHEi559/Pm1tbZxxxhnceuutfPDBBwD87ne/449//COf+cxnmD9/Pu3t7axcuZIFCxZ0yXfw9JEkZba+pjBhwoSdui31pJNOYvbs2bS0tPDZz36WSZMm0adPH0444QSOOuoohg4dyujRo3e4n8svv5x169bxhS98gbvuuotXX32VE088kZQSdXV13H///UyaNIlHH32UESNGMGzYME499dRd+cofESmlLtlRNTQ2NqbdfcmOt6RKvdPLL7/MJz/5yWqXUbjOvmdELEopNXa2vqePJEk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlPM5BUnaga6+db2cW8uvu+46fvSjH1FTU0OfPn24/fbbOeWUU7q0js4YCpLUzTzzzDM8+OCDLF68mH79+vH222/zpz/9qSLHLvz0UUTURMTzEfFgNn9oRPw2IloiYn5E7J2198vmW7LlDUXXJknd0cqVKxk8eHA+xtLgwYMZMmRIRY5diWsKfwu83GH+BuCmlNLhwDvA9Kx9OvBO1n5Ttp4k9Trjx4/n9ddf58gjj+TLX/4yjz/+eMWOXWgoREQ9cCbwf7L5AMYCW94ZNxc4N5s+J5snWz4uevpbtSWpE/vuuy+LFi2iqamJuro6pkyZwp133lmRYxd9TeFm4OvAgGx+ELA2pdSWzbcCB2fTBwOvA6SU2iJiXbb+2x13GBEzgBlQeumFJPVENTU1jBkzhjFjxnDssccyd+5cpk2bVvhxC+spRMRZwFsppUVdud+UUlNKqTGl1FhXV9eVu5akbuGVV15h+fLl+XxzczOHHHJIRY5dZE9hNHB2REwEaoH9gO8B+0fEXllvoR54I1v/DWAo0BoRewEDgTUF1idJZan06MQbNmzg0ksvZe3atey1114cfvjhNDU1VeTYhYVCSulq4GqAiBgDfC2ldGFE3AtMBu4GpgI/yzZ5IJt/Jlv+aNqTx/WWpF00atQonn766aocuxpPNF8JXB4RLZSuGdyRtd8BDMraLweuqkJtktSrVeThtZTSY8Bj2fTvgZM7WWcj8PlK1CNJ6pxjH0mScoaCJClnKEiScoaCJCnnKKmStAP/9q1ju3R/w7754g7XefPNN7nssst49tln2X///TnwwAO5+eabOfLII7u0lq0ZCpLUzaSUmDRpElOnTuXuu+8G4IUXXmDVqlWGgiT1NgsWLKBv377MnDkzbzv++OMrcmyvKUhSN/PSSy8xatSoqhzbUJAk5QwFSepmjj76aBYt6tIBpstmKEhSNzN27Fg2bdr0oZFRlyxZwq9//evCj+2FZknagXJuIe1KEcFPf/pTLrvsMm644QZqa2tpaGjg5ptvLvzYhoIkdUNDhgzhnnvuqfhxPX0kScoZCpKknKEgScoZCpKknKEgScoZCpKknLekStIOjL5ldJfu76lLn9rhOq2trcyaNYtly5bR3t7OxIkTufHGG+nXr1+X1rI1ewqS1M2klDjvvPM499xzWb58OcuXL+f999/n61//euHHNhQkqZt59NFHqa2t5eKLLwagpqaGm266iXnz5rFhw4ZCj20oSFI3s3Tp0o8Mnb3ffvvR0NBAS0tLocc2FCRJOUNBkrqZESNGfGTo7PXr1/Pmm28yfPjwQo9tKEhSNzNu3Djee+895s2bB0B7eztf/epXmT17Nvvss0+hx/aWVEnagXJuIe1KW4bOnjVrFtdeey2rV69mypQpzJkzp/Bj21OQpG5o6NChPPDAAyxfvpyHHnqIX/ziFyxevLjw49pTkKRu7rTTTuO1116ryLHsKUiScoaCpF4rpVTtEgq1K9/PUJDUK9XW1rJmzZoeGwwpJdasWUNtbe1Obec1BUm9Un19Pa2traxevbrapRSmtraW+vr6ndrGUJDUK/Xt25dDDz202mV0O54+kiTlDAVJUs5QkCTlDAVJUq6wUIiI2ohYGBEvRMTSiPhvWfuhEfHbiGiJiPkRsXfW3i+bb8mWNxRVmySpc0X2FDYBY1NKxwMjgQkR8SngBuCmlNLhwDvA9Gz96cA7WftN2XqSpAoqLBRSyZb3xvXNPgkYC/w4a58LnJtNn5PNky0fFxFRVH2SpI8q9JpCRNRERDPwFvAw8P+AtSmltmyVVuDgbPpg4HWAbPk6YFAn+5wREc9FxHM9+aETSaqGQkMhpdSeUhoJ1AMnA0d1wT6bUkqNKaXGurq63d2dJKmDitx9lFJaCywATgX2j4gtT1LXA29k028AQwGy5QOBNZWoT5JUUuTdR3URsX82vQ/w58DLlMJhcrbaVOBn2fQD2TzZ8kdTTx2pSpK6qSLHPjoImBsRNZTC556U0oMRsQy4OyK+DTwP3JGtfwfwTxHRAvwB+IsCa5MkdaKwUEgpLQFO6KT995SuL2zdvhH4fFH1SJJ2zCeaJUk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlDMUJEk5Q0GSlDMUJEm5skIhIh4pp02StGfb7kt2IqIW+BgwOCI+DkS2aD/g4IJrkyRV2I7evPZF4DJgCLCI/wiF9cD/Kq4sSVI1bDcUUkrfA74XEZemlG6pUE2SpCop6x3NKaVbIuI0oKHjNimleQXVJUmqgrJCISL+CTgMaAbas+YEGAqS1IOUFQpAIzAipZSKLEaSVF3lPqfwEvCfiixEklR95fYUBgPLImIhsGlLY0rp7EKqkiRVRbmh8PdFFiFJ6h7Kvfvo8aILkSRVX7l3H71L6W4jgL2BvsAfU0r7FVWYJKnyyu0pDNgyHREBnAN8qqiiJEnVsdOjpKaS+4Ezur4cSVI1lXv66LwOs30oPbewsZCKJElVU+7dR/+5w3Qb8CqlU0iSpB6k3GsKFxddiCSp+sp9yU59RPw0It7KPj+JiPqii5MkVVa5F5p/CDxA6b0KQ4B/ydokST1IuaFQl1L6YUqpLfvcCdQVWJckqQrKDYU1EfFXEVGTff4KWFNkYZKkyis3FC4BzgfeBFYCk4FpBdUkSaqScm9J/RYwNaX0DkBEHAB8l1JYSJJ6iHJ7CsdtCQSAlNIfgBO2t0FEDI2IBRGxLCKWRsTfZu0HRMTDEbE8+/PjWXtExPcjoiUilkTEibv6pSRJu6bcnkKfiPj4Vj2FHW3bBnw1pbQ4IgYAiyLiYUqnnR5JKV0fEVcBVwFXAp8Djsg+pwC3Zn9KvdKoK/a8t90u+s5F1S5Bu6ncULgReCYi7s3mPw9ct70NUkorKV1/IKX0bkS8DBxM6UnoMdlqc4HHKIXCOcC87JWfv4mI/SPioGw/kqQKKPeJ5nkR8RwwNms6L6W0rNyDREQDpdNNvwUO7PAf+jeBA7Ppg4HXO2zWmrV9KBQiYgYwA2DYsGHlliBJKkO5PQWyECg7CLaIiH2BnwCXpZTWl0bezveZIiJtc+PO62gCmgAaGxt3altJ0vbt9NDZOyMi+lIKhLtSSvdlzasi4qBs+UHAW1n7G8DQDpvXZ22SpAopLBSyl/HcAbycUvqHDoseAKZm01OBn3Vovyi7C+lTwDqvJ0hSZZV9+mgXjAa+ALwYEc1Z298B1wP3RMR04DVKD8UBPARMBFqA9wBHZpWkCissFFJKTwKxjcXjOlk/AbOKqkeStGOFXlOQJO1ZDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUs5QkCTlDAVJUq6wUIiIH0TEWxHxUoe2AyLi4YhYnv358aw9IuL7EdESEUsi4sSi6pIkbVuRPYU7gQlbtV0FPJJSOgJ4JJsH+BxwRPaZAdxaYF2SpG0oLBRSSk8Af9iq+RxgbjY9Fzi3Q/u8VPIbYP+IOKio2iRJnav0NYUDU0ors+k3gQOz6YOB1zus15q1fUREzIiI5yLiudWrVxdXqST1QlW70JxSSkDahe2aUkqNKaXGurq6AiqTpN5rrwofb1VEHJRSWpmdHnora38DGNphvfqsTVv5t28dW+0Sdtqwb75Y7RIklanSPYUHgKnZ9FTgZx3aL8ruQvoUsK7DaSZJUoUU1lOIiH8GxgCDI6IVuAa4HrgnIqYDrwHnZ6s/BEwEWoD3gIuLqkuStG2FhUJK6YJtLBrXyboJmFVULZKk8vhEsyQpZyhIknKGgiQpZyhIknKGgiQpZyhIknKGgiQpV+lhLiT1YHvaMCwOwfJR9hQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUc+hsFW70LaOrXcJOe+rSp6pdglQV9hQkSTl7CpJ6LXuxH2VPQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKUMxQkSTlDQZKU61ahEBETIuKViGiJiKuqXY8k9TbdJhQiogb4R+BzwAjggogYUd2qJKl36TahAJwMtKSUfp9S+hNwN3BOlWuSpF6lO71k52Dg9Q7zrcApW68UETOAGdnshoh4pQK1dRuHFLv7wcDbxR5izxB/E9UuYY9U4O/T32ami36b2/xX1Z1CoSwppSagqdp19EQR8VxKqbHadUhb87dZOd3p9NEbwNAO8/VZmySpQrpTKDwLHBERh0bE3sBfAA9UuSZJ6lW6zemjlFJbRMwGfgnUAD9IKS2tclm9jafl1F3526yQSClVuwZJUjfRnU4fSZKqzFCQJOUMBXUqIsZExIPVrkM9Q0T8TUS8HBF3FbT/v4+IrxWx796m21xoltSjfRk4PaXUWu1CtH32FHqwiGiIiH+NiDsj4ncRcVdEnB4RT0XE8og4Ofs8ExHPR8TTETG8k/30j4gfRMTCbD2HH1HZIuI24BPAzyNiTme/pYiYFhH3R8TDEfFqRMyOiMuzdX4TEQdk6/11RDwbES9ExE8i4mOdHO+wiPhFRCyKiF9HxFGV/cZ7NkOh5zscuBE4Kvv8JfBp4GvA3wH/CvxZSukE4JvAf+9kH3OAR1NKJwOfBb4TEf0rULt6gJTSTODfKf12+rPt39IxwHnAScB1wHvZ7/IZ4KJsnftSSiellI4HXgamd3LIJuDSlNIoSr/z/13MN+uZPH3U861IKb0IEBFLgUdSSikiXgQagIHA3Ig4AkhA3072MR44u8M521pgGKW/lNLO2NZvCWBBSuld4N2IWAf8S9b+InBcNn1MRHwb2B/Yl9JzTbmI2Bc4Dbg3Ih8jqF8B36PHMhR6vk0dpjd3mN9M6d//tZT+Mk6KiAbgsU72EcB/SSn1qsEHVYhOf0sRcQo7/q0C3Amcm1J6ISKmAWO22n8fYG1KaWSXVt2LePpIA/mPMaambWOdXwKXRva/XhFxQgXqUs+0u7+lAcDKiOgLXLj1wpTSemBFRHw+239ExPG7WXOvYijofwL/IyKeZ9s9x2spnVZakp2CurZSxanH2d3f0n8Ffgs8Rel6WGcuBKZHxAvAUnwvy05xmAtJUs6egiQpZyhIknKGgiQpZyhIknKGgiQpZyhIuygbx2dpRCyJiObsASxpj+YTzdIuiIhTgbOAE1NKmyJiMLB3lcuSdps9BWnXHAS8nVLaBJBSejul9O8RMSoiHs9G6PxlRBwUEQMj4pUtI9BGxD9HxF9XtXppG3x4TdoF2cBrTwIfA/4vMB94GngcOCeltDoipgBnpJQuiYg/B74FfA+YllKaUKXSpe3y9JG0C1JKGyJiFPBnlIaAng98m9Lwzw9nQ/vUACuz9R/OxuP5R8CxeNRt2VOQukBETAZmAbUppVM7Wd6HUi+iAZi4ZThzqbvxmoK0CyJiePYOii1GUnq/RF12EZqI6BsRR2fLv5It/0vgh9kon1K3Y09B2gXZqaNbKL3spQ1oAWYA9cD3KQ1JvhdwM/AEcD9wckrp3Yj4B+DdlNI1FS9c2gFDQZKU8/SRJClnKEiScoaCJClnKEiScoaCJClnKEiScoaCJCn3/wH/0r70JSvV/wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Sex', hue = 'Embarked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6af06247",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:58.349691Z",
     "iopub.status.busy": "2022-05-26T01:35:58.349200Z",
     "iopub.status.idle": "2022-05-26T01:35:58.556382Z",
     "shell.execute_reply": "2022-05-26T01:35:58.555374Z"
    },
    "papermill": {
     "duration": 0.383569,
     "end_time": "2022-05-26T01:35:58.559225",
     "exception": false,
     "start_time": "2022-05-26T01:35:58.175656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Embarked', ylabel='count'>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Embarked', hue = 'Survived')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e91394d6",
   "metadata": {
    "papermill": {
     "duration": 0.137988,
     "end_time": "2022-05-26T01:35:58.836070",
     "exception": false,
     "start_time": "2022-05-26T01:35:58.698082",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 수치형 데이터\n",
    "- sns.violinplot 이용해서 시각화: 박스플롯 + 밀집도 그래프"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "01206a3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:35:59.119891Z",
     "iopub.status.busy": "2022-05-26T01:35:59.119221Z",
     "iopub.status.idle": "2022-05-26T01:35:59.387338Z",
     "shell.execute_reply": "2022-05-26T01:35:59.386359Z"
    },
    "papermill": {
     "duration": 0.413655,
     "end_time": "2022-05-26T01:35:59.389751",
     "exception": false,
     "start_time": "2022-05-26T01:35:58.976096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='Age'>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "sns.violinplot(data=train,\n",
    "              x='Sex',\n",
    "              y='Age',\n",
    "              hue='Survived',\n",
    "              split=True) #나눠진 그래프 합침"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93616b9e",
   "metadata": {
    "papermill": {
     "duration": 0.14331,
     "end_time": "2022-05-26T01:35:59.674278",
     "exception": false,
     "start_time": "2022-05-26T01:35:59.530968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- 20 ~40대 사이가 많이 사망/생존\n",
    "- 어린 아이 중에서는 남자 아이가 많이 생존"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "785a4065",
   "metadata": {
    "papermill": {
     "duration": 0.142579,
     "end_time": "2022-05-26T01:35:59.959815",
     "exception": false,
     "start_time": "2022-05-26T01:35:59.817236",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Fare 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c0e1c65b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:00.245565Z",
     "iopub.status.busy": "2022-05-26T01:36:00.245270Z",
     "iopub.status.idle": "2022-05-26T01:36:00.256989Z",
     "shell.execute_reply": "2022-05-26T01:36:00.256057Z"
    },
    "papermill": {
     "duration": 0.155959,
     "end_time": "2022-05-26T01:36:00.259141",
     "exception": false,
     "start_time": "2022-05-26T01:36:00.103182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean      32.204208\n",
       "std       49.693429\n",
       "min        0.000000\n",
       "25%        7.910400\n",
       "50%       14.454200\n",
       "75%       31.000000\n",
       "max      512.329200\n",
       "Name: Fare, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Fare'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3e114e7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:00.543675Z",
     "iopub.status.busy": "2022-05-26T01:36:00.543018Z",
     "iopub.status.idle": "2022-05-26T01:36:00.733582Z",
     "shell.execute_reply": "2022-05-26T01:36:00.732905Z"
    },
    "papermill": {
     "duration": 0.334949,
     "end_time": "2022-05-26T01:36:00.735721",
     "exception": false,
     "start_time": "2022-05-26T01:36:00.400772",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='Fare'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# x = 'Sex', y = 'Fare', hue = 'Survived'\n",
    "plt.figure(figsize=(10,5))\n",
    "sns.violinplot(data=train,\n",
    "              x='Sex',\n",
    "              y='Fare',\n",
    "              hue='Survived',\n",
    "              split=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d0f6c1e",
   "metadata": {
    "papermill": {
     "duration": 0.146121,
     "end_time": "2022-05-26T01:36:01.024038",
     "exception": false,
     "start_time": "2022-05-26T01:36:00.877917",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- 요금이 싼 사람이 비교적 많이 사망"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d2cf90",
   "metadata": {
    "papermill": {
     "duration": 0.142557,
     "end_time": "2022-05-26T01:36:01.314633",
     "exception": false,
     "start_time": "2022-05-26T01:36:01.172076",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Parch, Sibsp - 부모자식, 형제배우자\n",
    "- Parch, SibSp 더해서 가족의 숫자라는 새로운 컬럼생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f05614f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:01.601754Z",
     "iopub.status.busy": "2022-05-26T01:36:01.601456Z",
     "iopub.status.idle": "2022-05-26T01:36:01.608064Z",
     "shell.execute_reply": "2022-05-26T01:36:01.607437Z"
    },
    "papermill": {
     "duration": 0.153068,
     "end_time": "2022-05-26T01:36:01.610194",
     "exception": false,
     "start_time": "2022-05-26T01:36:01.457126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Family_size'] = train['Parch'] + train['SibSp'] +1\n",
    "test['Family_size'] = test['Parch'] + test['SibSp'] +1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "880eef12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:01.898357Z",
     "iopub.status.busy": "2022-05-26T01:36:01.897768Z",
     "iopub.status.idle": "2022-05-26T01:36:02.112847Z",
     "shell.execute_reply": "2022-05-26T01:36:02.112165Z"
    },
    "papermill": {
     "duration": 0.362136,
     "end_time": "2022-05-26T01:36:02.115067",
     "exception": false,
     "start_time": "2022-05-26T01:36:01.752931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Family_size', ylabel='count'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train,\n",
    "             x = 'Family_size',\n",
    "             hue = 'Survived')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c309b970",
   "metadata": {
    "papermill": {
     "duration": 0.146563,
     "end_time": "2022-05-26T01:36:02.428407",
     "exception": false,
     "start_time": "2022-05-26T01:36:02.281844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- 1명 : 죽은 비율이 높고, 2-4명 :산 비율 높고, 5~ : 죽은 비율 높음\n",
    "- 수치형 -> 범주형(binning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acf6250a",
   "metadata": {
    "papermill": {
     "duration": 0.142925,
     "end_time": "2022-05-26T01:36:02.714741",
     "exception": false,
     "start_time": "2022-05-26T01:36:02.571816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Q3\n",
    "- 범주형으로 변경된 값을 Family_size에 저장\n",
    "- 가족 size가 1 alone, 2~4 small, 5이상 large\n",
    "- train, test 모두 적용\n",
    "- cut "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8c958085",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:03.009959Z",
     "iopub.status.busy": "2022-05-26T01:36:03.009644Z",
     "iopub.status.idle": "2022-05-26T01:36:03.020293Z",
     "shell.execute_reply": "2022-05-26T01:36:03.019665Z"
    },
    "papermill": {
     "duration": 0.160791,
     "end_time": "2022-05-26T01:36:03.022581",
     "exception": false,
     "start_time": "2022-05-26T01:36:02.861790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 구간 설정: bins\n",
    "# 카테고리 이름 설정: labels\n",
    "bins = [0,1,4,20]\n",
    "labels = ['Alone', 'Small', 'Large']\n",
    "train['Family_group'] = pd.cut(train['Family_size'],\n",
    "                              bins = bins,\n",
    "                              labels = labels)\n",
    "test['Family_group'] = pd.cut(test['Family_size'],\n",
    "                              bins = bins,\n",
    "                              labels = labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "18845768",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:03.314309Z",
     "iopub.status.busy": "2022-05-26T01:36:03.313479Z",
     "iopub.status.idle": "2022-05-26T01:36:03.463695Z",
     "shell.execute_reply": "2022-05-26T01:36:03.462559Z"
    },
    "papermill": {
     "duration": 0.297975,
     "end_time": "2022-05-26T01:36:03.466473",
     "exception": false,
     "start_time": "2022-05-26T01:36:03.168498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Family_group', ylabel='count'>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# sns.countplot 이용해서 시각화\n",
    "sns.countplot(data = train,\n",
    "             x = 'Family_group',\n",
    "             hue=\"Survived\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1df6a22",
   "metadata": {
    "papermill": {
     "duration": 0.144668,
     "end_time": "2022-05-26T01:36:03.757830",
     "exception": false,
     "start_time": "2022-05-26T01:36:03.613162",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### text데이터 다루기"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76ddbdc9",
   "metadata": {
    "papermill": {
     "duration": 0.147057,
     "end_time": "2022-05-26T01:36:04.049294",
     "exception": false,
     "start_time": "2022-05-26T01:36:03.902237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Name 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "962f5b3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:04.344364Z",
     "iopub.status.busy": "2022-05-26T01:36:04.343851Z",
     "iopub.status.idle": "2022-05-26T01:36:04.351584Z",
     "shell.execute_reply": "2022-05-26T01:36:04.350705Z"
    },
    "papermill": {
     "duration": 0.156609,
     "end_time": "2022-05-26T01:36:04.353716",
     "exception": false,
     "start_time": "2022-05-26T01:36:04.197107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId\n",
       "1                                Braund, Mr. Owen Harris\n",
       "2      Cumings, Mrs. John Bradley (Florence Briggs Th...\n",
       "3                                 Heikkinen, Miss. Laina\n",
       "4           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
       "5                               Allen, Mr. William Henry\n",
       "                             ...                        \n",
       "887                                Montvila, Rev. Juozas\n",
       "888                         Graham, Miss. Margaret Edith\n",
       "889             Johnston, Miss. Catherine Helen \"Carrie\"\n",
       "890                                Behr, Mr. Karl Howell\n",
       "891                                  Dooley, Mr. Patrick\n",
       "Name: Name, Length: 891, dtype: object"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 중간 호칭 추출\n",
    "train['Name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "35162f06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:04.658445Z",
     "iopub.status.busy": "2022-05-26T01:36:04.657826Z",
     "iopub.status.idle": "2022-05-26T01:36:04.827280Z",
     "shell.execute_reply": "2022-05-26T01:36:04.822054Z"
    },
    "papermill": {
     "duration": 0.330445,
     "end_time": "2022-05-26T01:36:04.830174",
     "exception": false,
     "start_time": "2022-05-26T01:36:04.499729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Don\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Master\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Rev\n",
      "Rev\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Master\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Master\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Dr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Rev\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Master\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Dr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Mme\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Dr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Ms\n",
      "Mr\n",
      "Master\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Major\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Miss\n",
      "Major\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Lady\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Sir\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Rev\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Dr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mlle\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Col\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Dr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Col\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Mlle\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Capt\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "the Countess\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Dr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Master\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Dr\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Master\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mrs\n",
      "Mr\n",
      "Jonkheer\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Rev\n",
      "Mrs\n",
      "Master\n",
      "Mr\n",
      "Miss\n",
      "Miss\n",
      "Mrs\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Master\n",
      "Mr\n",
      "Mrs\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Mrs\n",
      "Mr\n",
      "Miss\n",
      "Mr\n",
      "Mr\n",
      "Mrs\n",
      "Rev\n",
      "Miss\n",
      "Miss\n",
      "Mr\n",
      "Mr\n"
     ]
    }
   ],
   "source": [
    "train['Name'][1].split(',')[1].split('.')[0].strip()\n",
    "for i in range(1,892):\n",
    "    print(train['Name'][i].split(',')[1].split('.')[0].strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f308ca78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:05.134142Z",
     "iopub.status.busy": "2022-05-26T01:36:05.133364Z",
     "iopub.status.idle": "2022-05-26T01:36:05.137847Z",
     "shell.execute_reply": "2022-05-26T01:36:05.137077Z"
    },
    "papermill": {
     "duration": 0.159252,
     "end_time": "2022-05-26T01:36:05.140091",
     "exception": false,
     "start_time": "2022-05-26T01:36:04.980839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def split_title(row):\n",
    "    return row.split(',')[1].split('.')[0].strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "165dbe4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:05.437998Z",
     "iopub.status.busy": "2022-05-26T01:36:05.437717Z",
     "iopub.status.idle": "2022-05-26T01:36:05.445139Z",
     "shell.execute_reply": "2022-05-26T01:36:05.444208Z"
    },
    "papermill": {
     "duration": 0.159214,
     "end_time": "2022-05-26T01:36:05.447189",
     "exception": false,
     "start_time": "2022-05-26T01:36:05.287975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Title'] = train['Name'].apply(split_title)\n",
    "test['Title'] = test['Name'].apply(split_title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "197d2da0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:05.744087Z",
     "iopub.status.busy": "2022-05-26T01:36:05.743616Z",
     "iopub.status.idle": "2022-05-26T01:36:05.749823Z",
     "shell.execute_reply": "2022-05-26T01:36:05.748899Z"
    },
    "papermill": {
     "duration": 0.157391,
     "end_time": "2022-05-26T01:36:05.752082",
     "exception": false,
     "start_time": "2022-05-26T01:36:05.594691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Braund, Mr. Owen Harris'"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Name'][1] #스트링 형태에서 스플릿 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a0d9f473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:06.051207Z",
     "iopub.status.busy": "2022-05-26T01:36:06.050916Z",
     "iopub.status.idle": "2022-05-26T01:36:06.054106Z",
     "shell.execute_reply": "2022-05-26T01:36:06.053436Z"
    },
    "papermill": {
     "duration": 0.153498,
     "end_time": "2022-05-26T01:36:06.055924",
     "exception": false,
     "start_time": "2022-05-26T01:36:05.902426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# apply 함수 때문에 한줄씩(문자열 형태) 스플릿 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "43b402dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:06.356265Z",
     "iopub.status.busy": "2022-05-26T01:36:06.355645Z",
     "iopub.status.idle": "2022-05-26T01:36:06.373621Z",
     "shell.execute_reply": "2022-05-26T01:36:06.372695Z"
    },
    "papermill": {
     "duration": 0.16944,
     "end_time": "2022-05-26T01:36:06.375853",
     "exception": false,
     "start_time": "2022-05-26T01:36:06.206413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Family_group</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived  Pclass  \\\n",
       "PassengerId                     \n",
       "1                   0       3   \n",
       "2                   1       1   \n",
       "3                   1       3   \n",
       "4                   1       1   \n",
       "5                   0       3   \n",
       "\n",
       "                                                          Name     Sex  Age  \\\n",
       "PassengerId                                                                   \n",
       "1                                      Braund, Mr. Owen Harris    male   22   \n",
       "2            Cumings, Mrs. John Bradley (Florence Briggs Th...  female   38   \n",
       "3                                       Heikkinen, Miss. Laina  female   26   \n",
       "4                 Futrelle, Mrs. Jacques Heath (Lily May Peel)  female   35   \n",
       "5                                     Allen, Mr. William Henry    male   35   \n",
       "\n",
       "             SibSp  Parch            Ticket     Fare Embarked Deck  \\\n",
       "PassengerId                                                          \n",
       "1                1      0         A/5 21171   7.2500        S    M   \n",
       "2                1      0          PC 17599  71.2833        C    C   \n",
       "3                0      0  STON/O2. 3101282   7.9250        S    M   \n",
       "4                1      0            113803  53.1000        S    C   \n",
       "5                0      0            373450   8.0500        S    M   \n",
       "\n",
       "             Family_size Family_group Title  \n",
       "PassengerId                                  \n",
       "1                      2        Small    Mr  \n",
       "2                      2        Small   Mrs  \n",
       "3                      1        Alone  Miss  \n",
       "4                      2        Small   Mrs  \n",
       "5                      1        Alone    Mr  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b6bc3b38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:06.672640Z",
     "iopub.status.busy": "2022-05-26T01:36:06.672298Z",
     "iopub.status.idle": "2022-05-26T01:36:07.018278Z",
     "shell.execute_reply": "2022-05-26T01:36:07.017683Z"
    },
    "papermill": {
     "duration": 0.497022,
     "end_time": "2022-05-26T01:36:07.020285",
     "exception": false,
     "start_time": "2022-05-26T01:36:06.523263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Title', ylabel='count'>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "sns.countplot(data = train,\n",
    "             x = 'Title',\n",
    "             hue = 'Survived')\n",
    "# Master 남자아이\n",
    "# Rev 신부/목사"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c8bd5e91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:07.322747Z",
     "iopub.status.busy": "2022-05-26T01:36:07.322361Z",
     "iopub.status.idle": "2022-05-26T01:36:07.328249Z",
     "shell.execute_reply": "2022-05-26T01:36:07.327540Z"
    },
    "papermill": {
     "duration": 0.15898,
     "end_time": "2022-05-26T01:36:07.330315",
     "exception": false,
     "start_time": "2022-05-26T01:36:07.171335",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n",
       "       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'the Countess',\n",
       "       'Jonkheer'], dtype=object)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train['Title'] 중복없이 출력\n",
    "train['Title'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c9b4897b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:07.630968Z",
     "iopub.status.busy": "2022-05-26T01:36:07.630417Z",
     "iopub.status.idle": "2022-05-26T01:36:07.637620Z",
     "shell.execute_reply": "2022-05-26T01:36:07.637004Z"
    },
    "papermill": {
     "duration": 0.15959,
     "end_time": "2022-05-26T01:36:07.639632",
     "exception": false,
     "start_time": "2022-05-26T01:36:07.480042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              517\n",
       "Miss            182\n",
       "Mrs             125\n",
       "Master           40\n",
       "Dr                7\n",
       "Rev               6\n",
       "Mlle              2\n",
       "Major             2\n",
       "Col               2\n",
       "the Countess      1\n",
       "Capt              1\n",
       "Ms                1\n",
       "Sir               1\n",
       "Lady              1\n",
       "Mme               1\n",
       "Don               1\n",
       "Jonkheer          1\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b3bee1ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:07.943073Z",
     "iopub.status.busy": "2022-05-26T01:36:07.942468Z",
     "iopub.status.idle": "2022-05-26T01:36:07.947176Z",
     "shell.execute_reply": "2022-05-26T01:36:07.946553Z"
    },
    "papermill": {
     "duration": 0.158463,
     "end_time": "2022-05-26T01:36:07.949171",
     "exception": false,
     "start_time": "2022-05-26T01:36:07.790708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# key값\n",
    "title = ['Mr', 'Mrs', 'Miss', 'Master', \n",
    "         'Rev','Mme', 'Ms', 'Lady', 'Don', 'Dr', 'Major', 'Sir', 'Mlle', 'Col','Capt', \n",
    "         'the Countess','Jonkheer']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fc990567",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:08.254319Z",
     "iopub.status.busy": "2022-05-26T01:36:08.253739Z",
     "iopub.status.idle": "2022-05-26T01:36:08.258506Z",
     "shell.execute_reply": "2022-05-26T01:36:08.257928Z"
    },
    "papermill": {
     "duration": 0.159632,
     "end_time": "2022-05-26T01:36:08.260470",
     "exception": false,
     "start_time": "2022-05-26T01:36:08.100838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2b740caf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:08.570225Z",
     "iopub.status.busy": "2022-05-26T01:36:08.569554Z",
     "iopub.status.idle": "2022-05-26T01:36:08.576437Z",
     "shell.execute_reply": "2022-05-26T01:36:08.575498Z"
    },
    "papermill": {
     "duration": 0.164365,
     "end_time": "2022-05-26T01:36:08.578630",
     "exception": false,
     "start_time": "2022-05-26T01:36:08.414265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Mr',\n",
       " 'Mrs',\n",
       " 'Miss',\n",
       " 'Master',\n",
       " 'Rev',\n",
       " 'Girls',\n",
       " 'Girls',\n",
       " 'Girls',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other',\n",
       " 'Other']"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dict의 value 값\n",
    "convert_title = ['Mr', 'Mrs', 'Miss', 'Master', 'Rev'] + ['Girls']*3 + ['Other']*9\n",
    "convert_title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f2949654",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:08.884888Z",
     "iopub.status.busy": "2022-05-26T01:36:08.884511Z",
     "iopub.status.idle": "2022-05-26T01:36:08.891238Z",
     "shell.execute_reply": "2022-05-26T01:36:08.890548Z"
    },
    "papermill": {
     "duration": 0.162948,
     "end_time": "2022-05-26T01:36:08.893353",
     "exception": false,
     "start_time": "2022-05-26T01:36:08.730405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Mr': 'Mr',\n",
       " 'Mrs': 'Mrs',\n",
       " 'Miss': 'Miss',\n",
       " 'Master': 'Master',\n",
       " 'Rev': 'Rev',\n",
       " 'Mme': 'Girls',\n",
       " 'Ms': 'Girls',\n",
       " 'Lady': 'Girls',\n",
       " 'Don': 'Other',\n",
       " 'Dr': 'Other',\n",
       " 'Major': 'Other',\n",
       " 'Sir': 'Other',\n",
       " 'Mlle': 'Other',\n",
       " 'Col': 'Other',\n",
       " 'Capt': 'Other',\n",
       " 'the Countess': 'Other',\n",
       " 'Jonkheer': 'Other'}"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title_dict = dict(zip(title, convert_title))\n",
    "title_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f2bac52f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:09.201349Z",
     "iopub.status.busy": "2022-05-26T01:36:09.200875Z",
     "iopub.status.idle": "2022-05-26T01:36:09.206760Z",
     "shell.execute_reply": "2022-05-26T01:36:09.206059Z"
    },
    "papermill": {
     "duration": 0.163087,
     "end_time": "2022-05-26T01:36:09.208858",
     "exception": false,
     "start_time": "2022-05-26T01:36:09.045771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['Title'] = train['Title'].map(title_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "733180ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:09.512468Z",
     "iopub.status.busy": "2022-05-26T01:36:09.512128Z",
     "iopub.status.idle": "2022-05-26T01:36:09.518260Z",
     "shell.execute_reply": "2022-05-26T01:36:09.517673Z"
    },
    "papermill": {
     "duration": 0.160794,
     "end_time": "2022-05-26T01:36:09.520468",
     "exception": false,
     "start_time": "2022-05-26T01:36:09.359674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Miss', 'Master', 'Other', 'Rev', 'Girls'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Title'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a5f044b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:09.908755Z",
     "iopub.status.busy": "2022-05-26T01:36:09.908086Z",
     "iopub.status.idle": "2022-05-26T01:36:09.914204Z",
     "shell.execute_reply": "2022-05-26T01:36:09.913258Z"
    },
    "papermill": {
     "duration": 0.16413,
     "end_time": "2022-05-26T01:36:09.916447",
     "exception": false,
     "start_time": "2022-05-26T01:36:09.752317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Miss', 'Master', 'Ms', 'Col', 'Rev', 'Dr', 'Dona'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test['Title'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "63fa180a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:10.242295Z",
     "iopub.status.busy": "2022-05-26T01:36:10.242000Z",
     "iopub.status.idle": "2022-05-26T01:36:10.246129Z",
     "shell.execute_reply": "2022-05-26T01:36:10.245262Z"
    },
    "papermill": {
     "duration": 0.163849,
     "end_time": "2022-05-26T01:36:10.248282",
     "exception": false,
     "start_time": "2022-05-26T01:36:10.084433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "title_dict['Dona'] = 'Other'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "6118b462",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:10.556116Z",
     "iopub.status.busy": "2022-05-26T01:36:10.555460Z",
     "iopub.status.idle": "2022-05-26T01:36:10.561328Z",
     "shell.execute_reply": "2022-05-26T01:36:10.560505Z"
    },
    "papermill": {
     "duration": 0.16145,
     "end_time": "2022-05-26T01:36:10.563391",
     "exception": false,
     "start_time": "2022-05-26T01:36:10.401941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Mr', 'Mrs', 'Miss', 'Master', 'Ms', 'Col', 'Rev', 'Dr', 'Dona'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test['Title'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "9c1355c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:10.901784Z",
     "iopub.status.busy": "2022-05-26T01:36:10.901138Z",
     "iopub.status.idle": "2022-05-26T01:36:10.906348Z",
     "shell.execute_reply": "2022-05-26T01:36:10.905678Z"
    },
    "papermill": {
     "duration": 0.191835,
     "end_time": "2022-05-26T01:36:10.908505",
     "exception": false,
     "start_time": "2022-05-26T01:36:10.716670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test['Title'] = test['Title'].map(title_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6ee0c9d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:11.223077Z",
     "iopub.status.busy": "2022-05-26T01:36:11.222431Z",
     "iopub.status.idle": "2022-05-26T01:36:11.232333Z",
     "shell.execute_reply": "2022-05-26T01:36:11.231549Z"
    },
    "papermill": {
     "duration": 0.17452,
     "end_time": "2022-05-26T01:36:11.234776",
     "exception": false,
     "start_time": "2022-05-26T01:36:11.060256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Name, Ticket drop\n",
    "train.drop(['Name','Ticket'], axis=1, inplace=True)\n",
    "test.drop(['Name','Ticket'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "1a9c3c6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:11.574821Z",
     "iopub.status.busy": "2022-05-26T01:36:11.574481Z",
     "iopub.status.idle": "2022-05-26T01:36:11.580439Z",
     "shell.execute_reply": "2022-05-26T01:36:11.579529Z"
    },
    "papermill": {
     "duration": 0.18107,
     "end_time": "2022-05-26T01:36:11.583009",
     "exception": false,
     "start_time": "2022-05-26T01:36:11.401939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 12)\n",
      "(418, 11)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da4c2f27",
   "metadata": {
    "papermill": {
     "duration": 0.159431,
     "end_time": "2022-05-26T01:36:11.900947",
     "exception": false,
     "start_time": "2022-05-26T01:36:11.741516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 문제와 답 분리\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "09062323",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:12.244357Z",
     "iopub.status.busy": "2022-05-26T01:36:12.244078Z",
     "iopub.status.idle": "2022-05-26T01:36:12.259837Z",
     "shell.execute_reply": "2022-05-26T01:36:12.259175Z"
    },
    "papermill": {
     "duration": 0.175415,
     "end_time": "2022-05-26T01:36:12.261679",
     "exception": false,
     "start_time": "2022-05-26T01:36:12.086264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Family_group</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived  Pclass     Sex  Age  SibSp  Parch     Fare Embarked  \\\n",
       "PassengerId                                                                  \n",
       "1                   0       3    male   22      1      0   7.2500        S   \n",
       "2                   1       1  female   38      1      0  71.2833        C   \n",
       "3                   1       3  female   26      0      0   7.9250        S   \n",
       "4                   1       1  female   35      1      0  53.1000        S   \n",
       "5                   0       3    male   35      0      0   8.0500        S   \n",
       "\n",
       "            Deck  Family_size Family_group Title  \n",
       "PassengerId                                       \n",
       "1              M            2        Small    Mr  \n",
       "2              C            2        Small   Mrs  \n",
       "3              M            1        Alone  Miss  \n",
       "4              C            2        Small   Mrs  \n",
       "5              M            1        Alone    Mr  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "492334f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:12.576398Z",
     "iopub.status.busy": "2022-05-26T01:36:12.575816Z",
     "iopub.status.idle": "2022-05-26T01:36:12.590829Z",
     "shell.execute_reply": "2022-05-26T01:36:12.589852Z"
    },
    "papermill": {
     "duration": 0.175882,
     "end_time": "2022-05-26T01:36:12.593020",
     "exception": false,
     "start_time": "2022-05-26T01:36:12.417138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Family_group</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>892</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>Q</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>893</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>894</th>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>Q</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>895</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Pclass     Sex  Age  SibSp  Parch     Fare Embarked Deck  \\\n",
       "PassengerId                                                             \n",
       "892               3    male   34      0      0   7.8292        Q    M   \n",
       "893               3  female   47      1      0      7.0        S    M   \n",
       "894               2    male   62      0      0   9.6875        Q    M   \n",
       "895               3    male   27      0      0   8.6625        S    M   \n",
       "896               3  female   22      1      1  12.2875        S    M   \n",
       "\n",
       "             Family_size Family_group Title  \n",
       "PassengerId                                  \n",
       "892                    1        Alone    Mr  \n",
       "893                    2        Small   Mrs  \n",
       "894                    1        Alone    Mr  \n",
       "895                    1        Alone    Mr  \n",
       "896                    3        Small   Mrs  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5fe65977",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:12.909497Z",
     "iopub.status.busy": "2022-05-26T01:36:12.909166Z",
     "iopub.status.idle": "2022-05-26T01:36:12.914802Z",
     "shell.execute_reply": "2022-05-26T01:36:12.914052Z"
    },
    "papermill": {
     "duration": 0.167912,
     "end_time": "2022-05-26T01:36:12.917018",
     "exception": false,
     "start_time": "2022-05-26T01:36:12.749106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = train.iloc[:,1:]\n",
    "y_train = train['Survived']\n",
    "X_test = test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "562625c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:13.261073Z",
     "iopub.status.busy": "2022-05-26T01:36:13.260466Z",
     "iopub.status.idle": "2022-05-26T01:36:13.281528Z",
     "shell.execute_reply": "2022-05-26T01:36:13.280691Z"
    },
    "papermill": {
     "duration": 0.207509,
     "end_time": "2022-05-26T01:36:13.283797",
     "exception": false,
     "start_time": "2022-05-26T01:36:13.076288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Family_size</th>\n",
       "      <th>Family_group</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>892</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>Q</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>893</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>894</th>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>Q</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>895</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>896</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>Small</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1305</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.05</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1306</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>108.9</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1307</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.25</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1308</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.05</td>\n",
       "      <td>S</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>Alone</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1309</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>C</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>Small</td>\n",
       "      <td>Master</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Pclass     Sex  Age  SibSp  Parch     Fare Embarked Deck  \\\n",
       "PassengerId                                                             \n",
       "892               3    male   34      0      0   7.8292        Q    M   \n",
       "893               3  female   47      1      0      7.0        S    M   \n",
       "894               2    male   62      0      0   9.6875        Q    M   \n",
       "895               3    male   27      0      0   8.6625        S    M   \n",
       "896               3  female   22      1      1  12.2875        S    M   \n",
       "...             ...     ...  ...    ...    ...      ...      ...  ...   \n",
       "1305              3    male   26      0      0     8.05        S    M   \n",
       "1306              1  female   39      0      0    108.9        C    C   \n",
       "1307              3    male   38      0      0     7.25        S    M   \n",
       "1308              3    male   26      0      0     8.05        S    M   \n",
       "1309              3    male   26      1      1  22.3583        C    M   \n",
       "\n",
       "             Family_size Family_group   Title  \n",
       "PassengerId                                    \n",
       "892                    1        Alone      Mr  \n",
       "893                    2        Small     Mrs  \n",
       "894                    1        Alone      Mr  \n",
       "895                    1        Alone      Mr  \n",
       "896                    3        Small     Mrs  \n",
       "...                  ...          ...     ...  \n",
       "1305                   1        Alone      Mr  \n",
       "1306                   1        Alone   Other  \n",
       "1307                   1        Alone      Mr  \n",
       "1308                   1        Alone      Mr  \n",
       "1309                   3        Small  Master  \n",
       "\n",
       "[418 rows x 11 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "44a9e355",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:13.600419Z",
     "iopub.status.busy": "2022-05-26T01:36:13.599775Z",
     "iopub.status.idle": "2022-05-26T01:36:13.606075Z",
     "shell.execute_reply": "2022-05-26T01:36:13.604820Z"
    },
    "papermill": {
     "duration": 0.171144,
     "end_time": "2022-05-26T01:36:13.608827",
     "exception": false,
     "start_time": "2022-05-26T01:36:13.437683",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 11)\n",
      "(891,)\n",
      "(418, 11)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "f23484b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:13.948179Z",
     "iopub.status.busy": "2022-05-26T01:36:13.947585Z",
     "iopub.status.idle": "2022-05-26T01:36:13.953810Z",
     "shell.execute_reply": "2022-05-26T01:36:13.953038Z"
    },
    "papermill": {
     "duration": 0.166008,
     "end_time": "2022-05-26T01:36:13.955741",
     "exception": false,
     "start_time": "2022-05-26T01:36:13.789733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Deck',\n",
       "       'Family_size', 'Family_group', 'Title'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.columns #컬럼값만 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "d2be034a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:14.271719Z",
     "iopub.status.busy": "2022-05-26T01:36:14.271161Z",
     "iopub.status.idle": "2022-05-26T01:36:14.275456Z",
     "shell.execute_reply": "2022-05-26T01:36:14.274876Z"
    },
    "papermill": {
     "duration": 0.163805,
     "end_time": "2022-05-26T01:36:14.277547",
     "exception": false,
     "start_time": "2022-05-26T01:36:14.113742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cat_feature=['Sex','Embarked','Family_group','Title', 'Deck']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3b45ebcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:14.590813Z",
     "iopub.status.busy": "2022-05-26T01:36:14.590470Z",
     "iopub.status.idle": "2022-05-26T01:36:14.740223Z",
     "shell.execute_reply": "2022-05-26T01:36:14.739112Z"
    },
    "papermill": {
     "duration": 0.309374,
     "end_time": "2022-05-26T01:36:14.742537",
     "exception": false,
     "start_time": "2022-05-26T01:36:14.433163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex_female</th>\n",
       "      <th>Sex_male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Sex_female  Sex_male\n",
       "PassengerId                      \n",
       "1                     0         1\n",
       "2                     1         0\n",
       "3                     1         0\n",
       "4                     1         0\n",
       "5                     0         1\n",
       "...                 ...       ...\n",
       "887                   0         1\n",
       "888                   1         0\n",
       "889                   1         0\n",
       "890                   0         1\n",
       "891                   0         1\n",
       "\n",
       "[891 rows x 2 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(X_train['Sex'], prefix='Sex') #prefix 고정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "08173a3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:15.060982Z",
     "iopub.status.busy": "2022-05-26T01:36:15.060680Z",
     "iopub.status.idle": "2022-05-26T01:36:15.081890Z",
     "shell.execute_reply": "2022-05-26T01:36:15.080965Z"
    },
    "papermill": {
     "duration": 0.183577,
     "end_time": "2022-05-26T01:36:15.084333",
     "exception": false,
     "start_time": "2022-05-26T01:36:14.900756",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "for cat_name in cat_feature:\n",
    "    one_hot = pd.get_dummies(X_train[cat_name], prefix=cat_name)\n",
    "    X_train = pd.concat([X_train, one_hot], axis=1) #원핫인코딩 컬럼 병합\n",
    "    X_train.drop([cat_name], axis=1, inplace = True) #기존 컬럼 drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fe86d927",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:15.406894Z",
     "iopub.status.busy": "2022-05-26T01:36:15.406550Z",
     "iopub.status.idle": "2022-05-26T01:36:15.421868Z",
     "shell.execute_reply": "2022-05-26T01:36:15.421150Z"
    },
    "papermill": {
     "duration": 0.182435,
     "end_time": "2022-05-26T01:36:15.424150",
     "exception": false,
     "start_time": "2022-05-26T01:36:15.241715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 30 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Pclass              891 non-null    int64  \n",
      " 1   Age                 891 non-null    int64  \n",
      " 2   SibSp               891 non-null    int64  \n",
      " 3   Parch               891 non-null    int64  \n",
      " 4   Fare                891 non-null    float64\n",
      " 5   Family_size         891 non-null    int64  \n",
      " 6   Sex_female          891 non-null    uint8  \n",
      " 7   Sex_male            891 non-null    uint8  \n",
      " 8   Embarked_C          891 non-null    uint8  \n",
      " 9   Embarked_Q          891 non-null    uint8  \n",
      " 10  Embarked_S          891 non-null    uint8  \n",
      " 11  Family_group_Alone  891 non-null    uint8  \n",
      " 12  Family_group_Small  891 non-null    uint8  \n",
      " 13  Family_group_Large  891 non-null    uint8  \n",
      " 14  Title_Girls         891 non-null    uint8  \n",
      " 15  Title_Master        891 non-null    uint8  \n",
      " 16  Title_Miss          891 non-null    uint8  \n",
      " 17  Title_Mr            891 non-null    uint8  \n",
      " 18  Title_Mrs           891 non-null    uint8  \n",
      " 19  Title_Other         891 non-null    uint8  \n",
      " 20  Title_Rev           891 non-null    uint8  \n",
      " 21  Deck_A              891 non-null    uint8  \n",
      " 22  Deck_B              891 non-null    uint8  \n",
      " 23  Deck_C              891 non-null    uint8  \n",
      " 24  Deck_D              891 non-null    uint8  \n",
      " 25  Deck_E              891 non-null    uint8  \n",
      " 26  Deck_F              891 non-null    uint8  \n",
      " 27  Deck_G              891 non-null    uint8  \n",
      " 28  Deck_M              891 non-null    uint8  \n",
      " 29  Deck_T              891 non-null    uint8  \n",
      "dtypes: float64(1), int64(5), uint8(24)\n",
      "memory usage: 101.9 KB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "609986e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:15.741189Z",
     "iopub.status.busy": "2022-05-26T01:36:15.740884Z",
     "iopub.status.idle": "2022-05-26T01:36:15.746414Z",
     "shell.execute_reply": "2022-05-26T01:36:15.745494Z"
    },
    "papermill": {
     "duration": 0.168312,
     "end_time": "2022-05-26T01:36:15.748961",
     "exception": false,
     "start_time": "2022-05-26T01:36:15.580649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 30)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "7c36701f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:16.067001Z",
     "iopub.status.busy": "2022-05-26T01:36:16.066350Z",
     "iopub.status.idle": "2022-05-26T01:36:16.086546Z",
     "shell.execute_reply": "2022-05-26T01:36:16.085825Z"
    },
    "papermill": {
     "duration": 0.183002,
     "end_time": "2022-05-26T01:36:16.088916",
     "exception": false,
     "start_time": "2022-05-26T01:36:15.905914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_test 원핫인코딩\n",
    "\n",
    "cat_feature2 = ['Sex','Embarked','Family_group','Title', 'Deck']\n",
    "\n",
    "for cat_name in cat_feature2:\n",
    "    one_hot2 = pd.get_dummies(X_test[cat_name], prefix=cat_name)\n",
    "    X_test = pd.concat([X_test, one_hot2], axis=1)\n",
    "    X_test.drop([cat_name], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "a1feb371",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:16.406715Z",
     "iopub.status.busy": "2022-05-26T01:36:16.406053Z",
     "iopub.status.idle": "2022-05-26T01:36:16.420337Z",
     "shell.execute_reply": "2022-05-26T01:36:16.418713Z"
    },
    "papermill": {
     "duration": 0.176507,
     "end_time": "2022-05-26T01:36:16.422513",
     "exception": false,
     "start_time": "2022-05-26T01:36:16.246006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 418 entries, 892 to 1309\n",
      "Data columns (total 29 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Pclass              418 non-null    int64 \n",
      " 1   Age                 418 non-null    int64 \n",
      " 2   SibSp               418 non-null    int64 \n",
      " 3   Parch               418 non-null    int64 \n",
      " 4   Fare                418 non-null    object\n",
      " 5   Family_size         418 non-null    int64 \n",
      " 6   Sex_female          418 non-null    uint8 \n",
      " 7   Sex_male            418 non-null    uint8 \n",
      " 8   Embarked_C          418 non-null    uint8 \n",
      " 9   Embarked_Q          418 non-null    uint8 \n",
      " 10  Embarked_S          418 non-null    uint8 \n",
      " 11  Family_group_Alone  418 non-null    uint8 \n",
      " 12  Family_group_Small  418 non-null    uint8 \n",
      " 13  Family_group_Large  418 non-null    uint8 \n",
      " 14  Title_Girls         418 non-null    uint8 \n",
      " 15  Title_Master        418 non-null    uint8 \n",
      " 16  Title_Miss          418 non-null    uint8 \n",
      " 17  Title_Mr            418 non-null    uint8 \n",
      " 18  Title_Mrs           418 non-null    uint8 \n",
      " 19  Title_Other         418 non-null    uint8 \n",
      " 20  Title_Rev           418 non-null    uint8 \n",
      " 21  Deck_A              418 non-null    uint8 \n",
      " 22  Deck_B              418 non-null    uint8 \n",
      " 23  Deck_C              418 non-null    uint8 \n",
      " 24  Deck_D              418 non-null    uint8 \n",
      " 25  Deck_E              418 non-null    uint8 \n",
      " 26  Deck_F              418 non-null    uint8 \n",
      " 27  Deck_G              418 non-null    uint8 \n",
      " 28  Deck_M              418 non-null    uint8 \n",
      "dtypes: int64(5), object(1), uint8(23)\n",
      "memory usage: 32.2+ KB\n"
     ]
    }
   ],
   "source": [
    "X_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "361cf597",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:16.740456Z",
     "iopub.status.busy": "2022-05-26T01:36:16.740164Z",
     "iopub.status.idle": "2022-05-26T01:36:16.743683Z",
     "shell.execute_reply": "2022-05-26T01:36:16.742824Z"
    },
    "papermill": {
     "duration": 0.166518,
     "end_time": "2022-05-26T01:36:16.745730",
     "exception": false,
     "start_time": "2022-05-26T01:36:16.579212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# set --> key값 X , value값만 있음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "94b8a18c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:17.065270Z",
     "iopub.status.busy": "2022-05-26T01:36:17.064963Z",
     "iopub.status.idle": "2022-05-26T01:36:17.070396Z",
     "shell.execute_reply": "2022-05-26T01:36:17.069844Z"
    },
    "papermill": {
     "duration": 0.168138,
     "end_time": "2022-05-26T01:36:17.072434",
     "exception": false,
     "start_time": "2022-05-26T01:36:16.904296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3}"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1 = [1,1,2,3,2]\n",
    "set(list1) #중복제거 하고 정렬 후 딕셔너리 형태로 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9311ea93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:17.391615Z",
     "iopub.status.busy": "2022-05-26T01:36:17.390945Z",
     "iopub.status.idle": "2022-05-26T01:36:17.397328Z",
     "shell.execute_reply": "2022-05-26T01:36:17.396525Z"
    },
    "papermill": {
     "duration": 0.168891,
     "end_time": "2022-05-26T01:36:17.399427",
     "exception": false,
     "start_time": "2022-05-26T01:36:17.230536",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Deck_T'}"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(X_train)-set(X_test) #X_test 에는 'Deck_T' 컬럼이 없다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "a8d6a47f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:17.717399Z",
     "iopub.status.busy": "2022-05-26T01:36:17.717092Z",
     "iopub.status.idle": "2022-05-26T01:36:17.722117Z",
     "shell.execute_reply": "2022-05-26T01:36:17.721147Z"
    },
    "papermill": {
     "duration": 0.166486,
     "end_time": "2022-05-26T01:36:17.723991",
     "exception": false,
     "start_time": "2022-05-26T01:36:17.557505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test['Deck_T'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "470b2c9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:18.044418Z",
     "iopub.status.busy": "2022-05-26T01:36:18.044136Z",
     "iopub.status.idle": "2022-05-26T01:36:18.049177Z",
     "shell.execute_reply": "2022-05-26T01:36:18.048259Z"
    },
    "papermill": {
     "duration": 0.169162,
     "end_time": "2022-05-26T01:36:18.051837",
     "exception": false,
     "start_time": "2022-05-26T01:36:17.882675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 30)\n",
      "(418, 30)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape) #X_test에 'Deck_T' 컬럼을 추가해줘서 컬럼개수 맞춤"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fc16d52",
   "metadata": {
    "papermill": {
     "duration": 0.164082,
     "end_time": "2022-05-26T01:36:18.386331",
     "exception": false,
     "start_time": "2022-05-26T01:36:18.222249",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 컬럼정렬"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f8a3726d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:18.702931Z",
     "iopub.status.busy": "2022-05-26T01:36:18.702650Z",
     "iopub.status.idle": "2022-05-26T01:36:18.706455Z",
     "shell.execute_reply": "2022-05-26T01:36:18.705515Z"
    },
    "papermill": {
     "duration": 0.164361,
     "end_time": "2022-05-26T01:36:18.708443",
     "exception": false,
     "start_time": "2022-05-26T01:36:18.544082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 컬럼 정렬이기 때문에 axis=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "cc3a5999",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:19.037260Z",
     "iopub.status.busy": "2022-05-26T01:36:19.036971Z",
     "iopub.status.idle": "2022-05-26T01:36:19.043421Z",
     "shell.execute_reply": "2022-05-26T01:36:19.042456Z"
    },
    "papermill": {
     "duration": 0.174239,
     "end_time": "2022-05-26T01:36:19.045482",
     "exception": false,
     "start_time": "2022-05-26T01:36:18.871243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train.sort_index(axis=1, inplace=True)\n",
    "X_test.sort_index(axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "101dc698",
   "metadata": {
    "papermill": {
     "duration": 0.159162,
     "end_time": "2022-05-26T01:36:19.363967",
     "exception": false,
     "start_time": "2022-05-26T01:36:19.204805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 4. 모델 선정 및 학습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5d7a2549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:19.683116Z",
     "iopub.status.busy": "2022-05-26T01:36:19.682554Z",
     "iopub.status.idle": "2022-05-26T01:36:20.054057Z",
     "shell.execute_reply": "2022-05-26T01:36:20.052911Z"
    },
    "papermill": {
     "duration": 0.533752,
     "end_time": "2022-05-26T01:36:20.056624",
     "exception": false,
     "start_time": "2022-05-26T01:36:19.522872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "f1e100dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:20.392040Z",
     "iopub.status.busy": "2022-05-26T01:36:20.391765Z",
     "iopub.status.idle": "2022-05-26T01:36:20.407819Z",
     "shell.execute_reply": "2022-05-26T01:36:20.406936Z"
    },
    "papermill": {
     "duration": 0.192715,
     "end_time": "2022-05-26T01:36:20.410376",
     "exception": false,
     "start_time": "2022-05-26T01:36:20.217661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_model = DecisionTreeClassifier()\n",
    "tree_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "c47a3cd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:20.773003Z",
     "iopub.status.busy": "2022-05-26T01:36:20.772506Z",
     "iopub.status.idle": "2022-05-26T01:36:20.778128Z",
     "shell.execute_reply": "2022-05-26T01:36:20.777349Z"
    },
    "papermill": {
     "duration": 0.170633,
     "end_time": "2022-05-26T01:36:20.780208",
     "exception": false,
     "start_time": "2022-05-26T01:36:20.609575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Deck_A', 'Deck_B', 'Deck_C', 'Deck_D', 'Deck_E', 'Deck_F',\n",
       "       'Deck_G', 'Deck_M', 'Deck_T', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n",
       "       'Family_group_Alone', 'Family_group_Large', 'Family_group_Small',\n",
       "       'Family_size', 'Fare', 'Parch', 'Pclass', 'Sex_female', 'Sex_male',\n",
       "       'SibSp', 'Title_Girls', 'Title_Master', 'Title_Miss', 'Title_Mr',\n",
       "       'Title_Mrs', 'Title_Other', 'Title_Rev'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "ffdb7589",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:21.105608Z",
     "iopub.status.busy": "2022-05-26T01:36:21.105072Z",
     "iopub.status.idle": "2022-05-26T01:36:21.116761Z",
     "shell.execute_reply": "2022-05-26T01:36:21.115854Z"
    },
    "papermill": {
     "duration": 0.177194,
     "end_time": "2022-05-26T01:36:21.119036",
     "exception": false,
     "start_time": "2022-05-26T01:36:20.941842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1,\n",
       "       1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,\n",
       "       1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n",
       "       0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n",
       "       0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n",
       "       1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0,\n",
       "       0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n",
       "       1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
       "       0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1,\n",
       "       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,\n",
       "       1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,\n",
       "       0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1,\n",
       "       1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,\n",
       "       0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test 예측\n",
    "pre = tree_model.predict(X_test)\n",
    "pre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "0b2391c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:21.447446Z",
     "iopub.status.busy": "2022-05-26T01:36:21.446690Z",
     "iopub.status.idle": "2022-05-26T01:36:21.462489Z",
     "shell.execute_reply": "2022-05-26T01:36:21.461893Z"
    },
    "papermill": {
     "duration": 0.182699,
     "end_time": "2022-05-26T01:36:21.464697",
     "exception": false,
     "start_time": "2022-05-26T01:36:21.281998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "0            892         0\n",
       "1            893         0\n",
       "2            894         1\n",
       "3            895         1\n",
       "4            896         1\n",
       "..           ...       ...\n",
       "413         1305         0\n",
       "414         1306         0\n",
       "415         1307         0\n",
       "416         1308         0\n",
       "417         1309         1\n",
       "\n",
       "[418 rows x 2 columns]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = pd.read_csv('../input/titanic/gender_submission.csv')\n",
    "result['Survived'] = pre\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6a165d60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:21.789442Z",
     "iopub.status.busy": "2022-05-26T01:36:21.789129Z",
     "iopub.status.idle": "2022-05-26T01:36:21.792873Z",
     "shell.execute_reply": "2022-05-26T01:36:21.791838Z"
    },
    "papermill": {
     "duration": 0.169477,
     "end_time": "2022-05-26T01:36:21.795035",
     "exception": false,
     "start_time": "2022-05-26T01:36:21.625558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#result.to_csv('C:/Users/shouz/Downloads/gender_submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309333c9",
   "metadata": {
    "papermill": {
     "duration": 0.163936,
     "end_time": "2022-05-26T01:36:22.121216",
     "exception": false,
     "start_time": "2022-05-26T01:36:21.957280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### tree 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "ddbb9f5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:22.443536Z",
     "iopub.status.busy": "2022-05-26T01:36:22.443074Z",
     "iopub.status.idle": "2022-05-26T01:36:22.447107Z",
     "shell.execute_reply": "2022-05-26T01:36:22.446507Z"
    },
    "papermill": {
     "duration": 0.167673,
     "end_time": "2022-05-26T01:36:22.449138",
     "exception": false,
     "start_time": "2022-05-26T01:36:22.281465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import export_graphviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "1b2061b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:22.774451Z",
     "iopub.status.busy": "2022-05-26T01:36:22.774143Z",
     "iopub.status.idle": "2022-05-26T01:36:22.829466Z",
     "shell.execute_reply": "2022-05-26T01:36:22.828734Z"
    },
    "papermill": {
     "duration": 0.222561,
     "end_time": "2022-05-26T01:36:22.831778",
     "exception": false,
     "start_time": "2022-05-26T01:36:22.609217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "export_graphviz(tree_model,\n",
    "               out_file = 'titanic_tree.dot',\n",
    "               class_names=['dead', 'survived'],\n",
    "               feature_names=X_train.columns,\n",
    "               impurity = True,\n",
    "               filled = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "a899ff12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:23.164779Z",
     "iopub.status.busy": "2022-05-26T01:36:23.164395Z",
     "iopub.status.idle": "2022-05-26T01:36:26.266429Z",
     "shell.execute_reply": "2022-05-26T01:36:26.265328Z"
    },
    "papermill": {
     "duration": 3.271626,
     "end_time": "2022-05-26T01:36:26.269066",
     "exception": false,
     "start_time": "2022-05-26T01:36:22.997440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'titanic_tree.dot.png'"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# png 그림으로 만들기\n",
    "from graphviz import render\n",
    "render('dot','png','titanic_tree.dot')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1a0850",
   "metadata": {
    "papermill": {
     "duration": 0.160771,
     "end_time": "2022-05-26T01:36:26.591873",
     "exception": false,
     "start_time": "2022-05-26T01:36:26.431102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 하이퍼파라미터 튜닝"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e879bec4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:26.925582Z",
     "iopub.status.busy": "2022-05-26T01:36:26.924653Z",
     "iopub.status.idle": "2022-05-26T01:36:26.929025Z",
     "shell.execute_reply": "2022-05-26T01:36:26.928320Z"
    },
    "papermill": {
     "duration": 0.173603,
     "end_time": "2022-05-26T01:36:26.931447",
     "exception": false,
     "start_time": "2022-05-26T01:36:26.757844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "73abb32f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:27.260748Z",
     "iopub.status.busy": "2022-05-26T01:36:27.260145Z",
     "iopub.status.idle": "2022-05-26T01:36:27.267437Z",
     "shell.execute_reply": "2022-05-26T01:36:27.266719Z"
    },
    "papermill": {
     "duration": 0.176292,
     "end_time": "2022-05-26T01:36:27.269959",
     "exception": false,
     "start_time": "2022-05-26T01:36:27.093667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train2, X_val, y_train2, y_val = train_test_split(X_train, y_train, random_state=77)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "bc316271",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:27.596300Z",
     "iopub.status.busy": "2022-05-26T01:36:27.595747Z",
     "iopub.status.idle": "2022-05-26T01:36:27.983523Z",
     "shell.execute_reply": "2022-05-26T01:36:27.982905Z"
    },
    "papermill": {
     "duration": 0.55239,
     "end_time": "2022-05-26T01:36:27.985797",
     "exception": false,
     "start_time": "2022-05-26T01:36:27.433407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_score_list = []\n",
    "test_score_list = []\n",
    "for max_d in range(1,50):\n",
    "    model = DecisionTreeClassifier(max_depth=max_d)\n",
    "    model.fit(X_train2, y_train2)\n",
    "    # 트레인 점수 누적\n",
    "    train_score_list.append(model.score(X_train2, y_train2))\n",
    "    # 테스트 점수 누적\n",
    "    test_score_list.append(model.score(X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "75830847",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:28.310904Z",
     "iopub.status.busy": "2022-05-26T01:36:28.310377Z",
     "iopub.status.idle": "2022-05-26T01:36:28.316256Z",
     "shell.execute_reply": "2022-05-26T01:36:28.315669Z"
    },
    "papermill": {
     "duration": 0.169532,
     "end_time": "2022-05-26T01:36:28.318290",
     "exception": false,
     "start_time": "2022-05-26T01:36:28.148758",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.7799401197604791,\n",
       " 0.7799401197604791,\n",
       " 0.8233532934131736,\n",
       " 0.8488023952095808,\n",
       " 0.8607784431137725,\n",
       " 0.874251497005988,\n",
       " 0.8892215568862275,\n",
       " 0.8997005988023952,\n",
       " 0.9251497005988024,\n",
       " 0.937125748502994,\n",
       " 0.9476047904191617,\n",
       " 0.9565868263473054,\n",
       " 0.9700598802395209,\n",
       " 0.9730538922155688,\n",
       " 0.9820359281437125,\n",
       " 0.9820359281437125,\n",
       " 0.9850299401197605,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084,\n",
       " 0.9880239520958084]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_score_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f2fb10a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:28.641493Z",
     "iopub.status.busy": "2022-05-26T01:36:28.640938Z",
     "iopub.status.idle": "2022-05-26T01:36:28.647869Z",
     "shell.execute_reply": "2022-05-26T01:36:28.646841Z"
    },
    "papermill": {
     "duration": 0.17031,
     "end_time": "2022-05-26T01:36:28.650032",
     "exception": false,
     "start_time": "2022-05-26T01:36:28.479722",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8071748878923767,\n",
       " 0.8071748878923767,\n",
       " 0.8161434977578476,\n",
       " 0.8026905829596412,\n",
       " 0.7982062780269058,\n",
       " 0.7892376681614349,\n",
       " 0.8116591928251121,\n",
       " 0.8161434977578476,\n",
       " 0.757847533632287,\n",
       " 0.7937219730941704,\n",
       " 0.7668161434977578,\n",
       " 0.7533632286995515,\n",
       " 0.757847533632287,\n",
       " 0.7757847533632287,\n",
       " 0.7847533632286996,\n",
       " 0.7668161434977578,\n",
       " 0.7802690582959642,\n",
       " 0.7623318385650224,\n",
       " 0.7713004484304933,\n",
       " 0.7443946188340808,\n",
       " 0.7623318385650224,\n",
       " 0.7443946188340808,\n",
       " 0.7623318385650224,\n",
       " 0.7713004484304933,\n",
       " 0.7713004484304933,\n",
       " 0.7488789237668162,\n",
       " 0.7668161434977578,\n",
       " 0.7892376681614349,\n",
       " 0.7668161434977578,\n",
       " 0.757847533632287,\n",
       " 0.7623318385650224,\n",
       " 0.757847533632287,\n",
       " 0.7802690582959642,\n",
       " 0.7892376681614349,\n",
       " 0.7713004484304933,\n",
       " 0.7533632286995515,\n",
       " 0.7488789237668162,\n",
       " 0.7533632286995515,\n",
       " 0.7802690582959642,\n",
       " 0.7892376681614349,\n",
       " 0.757847533632287,\n",
       " 0.7668161434977578,\n",
       " 0.7668161434977578,\n",
       " 0.7757847533632287,\n",
       " 0.7399103139013453,\n",
       " 0.7533632286995515,\n",
       " 0.7533632286995515,\n",
       " 0.7623318385650224,\n",
       " 0.7533632286995515]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_score_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "7db8e677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:28.983007Z",
     "iopub.status.busy": "2022-05-26T01:36:28.982157Z",
     "iopub.status.idle": "2022-05-26T01:36:29.452473Z",
     "shell.execute_reply": "2022-05-26T01:36:29.451635Z"
    },
    "papermill": {
     "duration": 0.642241,
     "end_time": "2022-05-26T01:36:29.454758",
     "exception": false,
     "start_time": "2022-05-26T01:36:28.812517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "plt.plot(range(1,50), train_score_list, label ='train')\n",
    "plt.plot(range(1,50), test_score_list, label ='test')\n",
    "plt.legend()\n",
    "plt.xticks(range(1,50))\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "661cab07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:29.783051Z",
     "iopub.status.busy": "2022-05-26T01:36:29.782361Z",
     "iopub.status.idle": "2022-05-26T01:36:29.786616Z",
     "shell.execute_reply": "2022-05-26T01:36:29.785634Z"
    },
    "papermill": {
     "duration": 0.171587,
     "end_time": "2022-05-26T01:36:29.788761",
     "exception": false,
     "start_time": "2022-05-26T01:36:29.617174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "### tree 깊이 지정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "869bd665",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:30.122714Z",
     "iopub.status.busy": "2022-05-26T01:36:30.122109Z",
     "iopub.status.idle": "2022-05-26T01:36:30.139688Z",
     "shell.execute_reply": "2022-05-26T01:36:30.138915Z"
    },
    "papermill": {
     "duration": 0.187221,
     "end_time": "2022-05-26T01:36:30.142172",
     "exception": false,
     "start_time": "2022-05-26T01:36:29.954951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tree_model = DecisionTreeClassifier(max_depth=3)\n",
    "tree_model.fit(X_train, y_train)\n",
    "pre = tree_model.predict(X_test)\n",
    "result = pd.read_csv('../input/titanic/gender_submission.csv')\n",
    "result['Survived'] = pre\n",
    "#result.to_csv('titanic_submission02.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5847959",
   "metadata": {
    "papermill": {
     "duration": 0.16655,
     "end_time": "2022-05-26T01:36:30.473700",
     "exception": false,
     "start_time": "2022-05-26T01:36:30.307150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 학습한 모델 저장하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "2d1e9fbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:30.807094Z",
     "iopub.status.busy": "2022-05-26T01:36:30.806788Z",
     "iopub.status.idle": "2022-05-26T01:36:30.810739Z",
     "shell.execute_reply": "2022-05-26T01:36:30.809871Z"
    },
    "papermill": {
     "duration": 0.173345,
     "end_time": "2022-05-26T01:36:30.812757",
     "exception": false,
     "start_time": "2022-05-26T01:36:30.639412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# pickle 모듈-> 데이터 저장 : 원래 타입 그대롷 저장\n",
    "\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "06b0454d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:31.147209Z",
     "iopub.status.busy": "2022-05-26T01:36:31.146582Z",
     "iopub.status.idle": "2022-05-26T01:36:31.151908Z",
     "shell.execute_reply": "2022-05-26T01:36:31.151142Z"
    },
    "papermill": {
     "duration": 0.172845,
     "end_time": "2022-05-26T01:36:31.154087",
     "exception": false,
     "start_time": "2022-05-26T01:36:30.981242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open('titanic_trained_tree_model.pkl', 'wb') as f:#write binary\n",
    "    pickle.dump(tree_model, f) #tree_model 을 f 로 저장"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "c9e435aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:31.488666Z",
     "iopub.status.busy": "2022-05-26T01:36:31.488209Z",
     "iopub.status.idle": "2022-05-26T01:36:31.492286Z",
     "shell.execute_reply": "2022-05-26T01:36:31.491460Z"
    },
    "papermill": {
     "duration": 0.17709,
     "end_time": "2022-05-26T01:36:31.494740",
     "exception": false,
     "start_time": "2022-05-26T01:36:31.317650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 플라스크에서 학습까지 하지 않고 미리 저장해놓은 모델을 불러오는 이유?\n",
    "# => 시간이 오래걸림"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "c024c384",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:31.828683Z",
     "iopub.status.busy": "2022-05-26T01:36:31.828058Z",
     "iopub.status.idle": "2022-05-26T01:36:31.834784Z",
     "shell.execute_reply": "2022-05-26T01:36:31.833952Z"
    },
    "papermill": {
     "duration": 0.172758,
     "end_time": "2022-05-26T01:36:31.836838",
     "exception": false,
     "start_time": "2022-05-26T01:36:31.664080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Deck_A', 'Deck_B', 'Deck_C', 'Deck_D', 'Deck_E', 'Deck_F',\n",
       "       'Deck_G', 'Deck_M', 'Deck_T', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n",
       "       'Family_group_Alone', 'Family_group_Large', 'Family_group_Small',\n",
       "       'Family_size', 'Fare', 'Parch', 'Pclass', 'Sex_female', 'Sex_male',\n",
       "       'SibSp', 'Title_Girls', 'Title_Master', 'Title_Miss', 'Title_Mr',\n",
       "       'Title_Mrs', 'Title_Other', 'Title_Rev'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "df669abc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:32.178426Z",
     "iopub.status.busy": "2022-05-26T01:36:32.177903Z",
     "iopub.status.idle": "2022-05-26T01:36:32.182171Z",
     "shell.execute_reply": "2022-05-26T01:36:32.181311Z"
    },
    "papermill": {
     "duration": 0.172168,
     "end_time": "2022-05-26T01:36:32.184277",
     "exception": false,
     "start_time": "2022-05-26T01:36:32.012109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open('titanic_column_name.pkl', 'wb') as f2:\n",
    "    pickle.dump(X_train.columns, f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "3c07dbf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-26T01:36:32.513005Z",
     "iopub.status.busy": "2022-05-26T01:36:32.512510Z",
     "iopub.status.idle": "2022-05-26T01:36:32.519140Z",
     "shell.execute_reply": "2022-05-26T01:36:32.518567Z"
    },
    "papermill": {
     "duration": 0.173455,
     "end_time": "2022-05-26T01:36:32.521071",
     "exception": false,
     "start_time": "2022-05-26T01:36:32.347616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId\n",
       "1      0\n",
       "2      0\n",
       "3      1\n",
       "4      0\n",
       "5      1\n",
       "      ..\n",
       "887    1\n",
       "888    1\n",
       "889    0\n",
       "890    1\n",
       "891    1\n",
       "Name: Family_group_Alone, Length: 891, dtype: uint8"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['Family_group_Alone']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1497dbaf",
   "metadata": {
    "papermill": {
     "duration": 0.163814,
     "end_time": "2022-05-26T01:36:32.848664",
     "exception": false,
     "start_time": "2022-05-26T01:36:32.684850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 62.795296,
   "end_time": "2022-05-26T01:36:33.935756",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-05-26T01:35:31.140460",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
